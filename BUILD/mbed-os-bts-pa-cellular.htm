<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\mbed-os-bts-pa-cellular.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\mbed-os-bts-pa-cellular.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jun 05 09:24:00 2018
<BR><P>
<H3>Maximum Stack Usage =        880 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__sti___8_main_cpp_led0_n &rArr; mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[219]">core_util_critical_section_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23b]">mbed_assert_internal</a><BR>
 <LI><a href="#[2d0]">exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d1]">mbed_die</a><BR>
 <LI><a href="#[209]">__cxa_guard_release</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23b]">mbed_assert_internal</a><BR>
 <LI><a href="#[206]">__cxa_guard_acquire</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23b]">mbed_assert_internal</a><BR>
 <LI><a href="#[37b]">serial_leuart_baud</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23b]">mbed_assert_internal</a><BR>
 <LI><a href="#[37f]">serial_enable_pins</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2da]">pin_mode</a><BR>
 <LI><a href="#[373]">pinmap_peripheral</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[289]">error</a><BR>
 <LI><a href="#[370]">pin_location</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[289]">error</a><BR>
 <LI><a href="#[385]">serial_preinit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23b]">mbed_assert_internal</a><BR>
 <LI><a href="#[372]">pinmap_merge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[289]">error</a><BR>
 <LI><a href="#[2b8]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[289]">error</a><BR>
 <LI><a href="#[2c6]">hal_critical_section_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23b]">mbed_assert_internal</a><BR>
 <LI><a href="#[2de]">initialize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23b]">mbed_assert_internal</a><BR>
 <LI><a href="#[236]">gpio_init_out</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d9]">gpio_init_out_ex</a><BR>
 <LI><a href="#[11]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NMI_Handler</a><BR>
 <LI><a href="#[17]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">DebugMon_Handler</a><BR>
 <LI><a href="#[20]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ACMP0_IRQHandler</a><BR>
 <LI><a href="#[126]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[126]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[52]">&lang;Func4&rang;</a> from .\build\serialbase.o(i.<Func4>) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[20]">ACMP0_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[21]">ADC0_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[3e]">AES_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[39]">BURTC_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[3a]">CMU_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[22]">DAC0_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[1a]">DMA_IRQHandler</a> from .\build\em_dma.o(i.DMA_IRQHandler) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[3f]">EBI_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[40]">EMU_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[41]">FPUEH_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[1b]">GPIO_EVEN_IRQHandler</a> from .\build\gpio_irq_api.o(i.GPIO_EVEN_IRQHandler) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[25]">GPIO_ODD_IRQHandler</a> from .\build\gpio_irq_api.o(i.GPIO_ODD_IRQHandler) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[23]">I2C0_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[24]">I2C1_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[3c]">LCD_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[2b]">LESENSE_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[34]">LETIMER0_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[32]">LEUART0_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[33]">LEUART1_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[3d]">MSC_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[35]">PCNT0_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[36]">PCNT1_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[37]">PCNT2_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[38]">RTC_IRQHandler</a> from .\build\rtc_api.o(i.RTC_IRQHandler) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[38]">RTC_IRQHandler</a> from .\build\rtc_api.o(i.RTC_IRQHandler) referenced from .\build\rtc_api.o(i.rtc_init_real)
 <LI><a href="#[10]">Reset_Handler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\systimer.o(i._ZN4rtos8internal8SysTimer9setup_irqEv)
 <LI><a href="#[19]">SysTick_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[43]">SystemInit</a> from .\build\system_efm32wg.o(i.SystemInit) referenced from .\build\startup_efm32wg.o(.text)
 <LI><a href="#[1c]">TIMER0_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[2e]">UART0_RX_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[2f]">UART0_TX_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[30]">UART1_RX_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[31]">UART1_TX_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[1d]">USART0_RX_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[1e]">USART0_TX_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[29]">USART1_RX_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[2a]">USART1_TX_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[2c]">USART2_RX_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[2d]">USART2_TX_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[1f]">USB_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[3b]">VCMP_IRQHandler</a> from .\build\startup_efm32wg.o(.text) referenced from .\build\startup_efm32wg.o(RESET)
 <LI><a href="#[4e]">watchdog_wakeup()</a> from .\build\main.o(i._Z15watchdog_wakeupv) referenced from .\build\main.o(i._Z16PWP_SW_BG96_testv)
 <LI><a href="#[50]">SYSTEM_GetUnique()</a> from .\build\main.o(i._Z16SYSTEM_GetUniquev) referenced from .\build\main.o(i._Z16PWP_SW_BG96_testv)
 <LI><a href="#[50]">SYSTEM_GetUnique()</a> from .\build\main.o(i._Z16SYSTEM_GetUniquev) referenced from .\build\main.o(i.main)
 <LI><a href="#[f]">default_idle_hook()</a> from .\build\mbed_rtx_idle.o(i._Z17default_idle_hookv) referenced 2 times from .\build\mbed_rtx_idle.o(.data)
 <LI><a href="#[51]">equeue_tick_update()</a> from .\build\equeue_mbed.o(i._Z18equeue_tick_updatev) referenced from .\build\equeue_mbed.o(i._Z16equeue_tick_initv)
 <LI><a href="#[4f]">Skywire_Rx_interrupt()</a> from .\build\main.o(i._Z20Skywire_Rx_interruptv) referenced from .\build\main.o(i._Z16PWP_SW_BG96_testv)
 <LI><a href="#[a2]">CellularBase::~CellularBase__sub_object()</a> from .\build\easycellularconnection.o(i._ZN12CellularBaseD2Ev) referenced from .\build\easycellularconnection.o(.constdata__ZTV12CellularBase)
 <LI><a href="#[a4]">DirectSerial::read(void*, unsigned)</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial4readEPvj) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[a6]">DirectSerial::seek(long, int)</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial4seekEli) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[a9]">DirectSerial::size()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial4sizeEv) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[a7]">DirectSerial::close()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial5closeEv) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[a5]">DirectSerial::write(const void*, unsigned)</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial5writeEPKvj) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[a8]">DirectSerial::isatty()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial6isattyEv) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[4d]">DirectSerial::~DirectSerial()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[4d]">DirectSerial::~DirectSerial()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev) referenced from .\build\mbed_retarget.o(i._Z15default_consolev)
 <LI><a href="#[ac]">mbed::FileHandle::size()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[ac]">mbed::FileHandle::size()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[ac]">mbed::FileHandle::size()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[ab]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[ab]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[aa]">mbed::FileHandle::~FileHandle__sub_object()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandleD2Ev) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[53]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[9e]">mbed::SerialBase::interrupt_handler_asynch()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase24interrupt_handler_asynchEv) referenced from .\build\serialbase.o(.constdata)
 <LI><a href="#[ad]">mbed::SerialBase::lock()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase4lockEv) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[ae]">mbed::SerialBase::unlock()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase6unlockEv) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[af]">mbed::SerialBase::~SerialBase()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[55]">mbed::TimerEvent::irq(unsigned)</a> from .\build\timerevent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from .\build\timerevent.o(i._ZN4mbed10TimerEventC2EPK13ticker_data_t)
 <LI><a href="#[55]">mbed::TimerEvent::irq(unsigned)</a> from .\build\timerevent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from .\build\timerevent.o(i._ZN4mbed10TimerEventC2Ev)
 <LI><a href="#[b0]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from .\build\timerevent.o(i._ZN4mbed10TimerEventD2Ev) referenced from .\build\timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[ba]">mbed::UARTSerial::api_unlock()</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial10api_unlockEv) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[b1]">mbed::UARTSerial::lock()</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial4lockEv) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[b5]">mbed::UARTSerial::read(void*, unsigned)</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial4readEPvj) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[b8]">mbed::UARTSerial::seek(long, int)</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial4seekEli) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[b6]">mbed::UARTSerial::close()</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial5closeEv) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[b4]">mbed::UARTSerial::write(const void*, unsigned)</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial5writeEPKvj) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[b7]">mbed::UARTSerial::isatty()</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial6isattyEv) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[a1]">mbed::UARTSerial::rx_irq()</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial6rx_irqEv) referenced from .\build\uartserial.o(.constdata)
 <LI><a href="#[a0]">mbed::UARTSerial::tx_irq()</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial6tx_irqEv) referenced from .\build\uartserial.o(.constdata)
 <LI><a href="#[b2]">mbed::UARTSerial::unlock()</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial6unlockEv) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[9f]">mbed::UARTSerial::dcd_irq()</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial7dcd_irqEv) referenced from .\build\uartserial.o(.constdata)
 <LI><a href="#[b9]">mbed::UARTSerial::api_lock()</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerial8api_lockEv) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[b3]">mbed::UARTSerial::~UARTSerial()</a> from .\build\uartserial.o(i._ZN4mbed10UARTSerialD1Ev) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[59]">mbed::Transaction&lang;mbed::SPI&rang;::Transaction()</a> from .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev) referenced from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164)
 <LI><a href="#[8e]">mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()</a> from .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev) referenced from .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj4EjED1Ev)
 <LI><a href="#[5a]">mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)4, unsigned&rang;::~CircularBuffer()</a> from .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj4EjED1Ev) referenced from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164)
 <LI><a href="#[c3]">mbed::LowPowerTicker::~LowPowerTicker__deallocating()</a> from .\build\main.o(i._ZN4mbed14LowPowerTickerD0Ev) referenced from .\build\main.o(.constdata__ZTVN4mbed14LowPowerTickerE)
 <LI><a href="#[5d]">mbed::LowPowerTicker::~LowPowerTicker()</a> from .\build\main.o(i._ZN4mbed14LowPowerTickerD1Ev) referenced from .\build\main.o(.constdata__ZTVN4mbed14LowPowerTickerE)
 <LI><a href="#[5d]">mbed::LowPowerTicker::~LowPowerTicker()</a> from .\build\main.o(i._ZN4mbed14LowPowerTickerD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led0_n)
 <LI><a href="#[c1]">mbed::AT_CellularDevice::close_power()</a> from .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDevice11close_powerEv) referenced from .\build\quectel_bg96.o(.constdata__ZTVN4mbed12QUECTEL_BG96E)
 <LI><a href="#[c1]">mbed::AT_CellularDevice::close_power()</a> from .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDevice11close_powerEv) referenced from .\build\at_cellulardevice.o(.constdata__ZTVN4mbed17AT_CellularDeviceE)
 <LI><a href="#[c0]">mbed::AT_CellularDevice::close_network()</a> from .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDevice13close_networkEv) referenced from .\build\quectel_bg96.o(.constdata__ZTVN4mbed12QUECTEL_BG96E)
 <LI><a href="#[c0]">mbed::AT_CellularDevice::close_network()</a> from .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDevice13close_networkEv) referenced from .\build\at_cellulardevice.o(.constdata__ZTVN4mbed17AT_CellularDeviceE)
 <LI><a href="#[c2]">mbed::AT_CellularDevice::modem_debug_on(bool)</a> from .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDevice14modem_debug_onEb) referenced from .\build\quectel_bg96.o(.constdata__ZTVN4mbed12QUECTEL_BG96E)
 <LI><a href="#[c2]">mbed::AT_CellularDevice::modem_debug_on(bool)</a> from .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDevice14modem_debug_onEb) referenced from .\build\at_cellulardevice.o(.constdata__ZTVN4mbed17AT_CellularDeviceE)
 <LI><a href="#[c5]">mbed::CellularConnectionFSM::~CellularConnectionFSM()</a> from .\build\cellularconnectionfsm.o(i._ZN4mbed21CellularConnectionFSMD1Ev) referenced from .\build\cellularconnectionfsm.o(.constdata__ZTVN4mbed21CellularConnectionFSME)
 <LI><a href="#[5f]">mbed::EasyCellularConnection::~EasyCellularConnection()</a> from .\build\easycellularconnection.o(i._ZN4mbed22EasyCellularConnectionD1Ev) referenced from .\build\easycellularconnection.o(.constdata__ZTVN4mbed22EasyCellularConnectionE)
 <LI><a href="#[5f]">mbed::EasyCellularConnection::~EasyCellularConnection()</a> from .\build\easycellularconnection.o(i._ZN4mbed22EasyCellularConnectionD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led0_n)
 <LI><a href="#[57]">mbed::Timer::~Timer()</a> from .\build\timer.o(i._ZN4mbed5TimerD1Ev) referenced from .\build\arm_hal_timer.o(i.__sti___17_arm_hal_timer_cpp_749a681d)
 <LI><a href="#[57]">mbed::Timer::~Timer()</a> from .\build\timer.o(i._ZN4mbed5TimerD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led0_n)
 <LI><a href="#[c6]">mbed::Serial::lock()</a> from .\build\serial.o(i._ZN4mbed6Serial4lockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c8]">mbed::Serial::_getc()</a> from .\build\serial.o(i._ZN4mbed6Serial5_getcEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c9]">mbed::Serial::_putc(int)</a> from .\build\serial.o(i._ZN4mbed6Serial5_putcEi) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c7]">mbed::Serial::unlock()</a> from .\build\serial.o(i._ZN4mbed6Serial6unlockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[5c]">mbed::Serial::~Serial()</a> from .\build\serial.o(i._ZN4mbed6SerialD1Ev) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[5c]">mbed::Serial::~Serial()</a> from .\build\serial.o(i._ZN4mbed6SerialD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led0_n)
 <LI><a href="#[d5]">mbed::Stream::lock()</a> from .\build\stream.o(i._ZN4mbed6Stream4lockEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[ca]">mbed::Stream::read(void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream4readEPvj) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[ca]">mbed::Stream::read(void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream4readEPvj) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[cc]">mbed::Stream::seek(long, int)</a> from .\build\stream.o(i._ZN4mbed6Stream4seekEli) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[cc]">mbed::Stream::seek(long, int)</a> from .\build\stream.o(i._ZN4mbed6Stream4seekEli) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[cf]">mbed::Stream::size()</a> from .\build\stream.o(i._ZN4mbed6Stream4sizeEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[cf]">mbed::Stream::size()</a> from .\build\stream.o(i._ZN4mbed6Stream4sizeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[cd]">mbed::Stream::close()</a> from .\build\stream.o(i._ZN4mbed6Stream5closeEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[cd]">mbed::Stream::close()</a> from .\build\stream.o(i._ZN4mbed6Stream5closeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[cb]">mbed::Stream::write(const void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[cb]">mbed::Stream::write(const void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[ce]">mbed::Stream::isatty()</a> from .\build\stream.o(i._ZN4mbed6Stream6isattyEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[ce]">mbed::Stream::isatty()</a> from .\build\stream.o(i._ZN4mbed6Stream6isattyEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[d6]">mbed::Stream::unlock()</a> from .\build\stream.o(i._ZN4mbed6Stream6unlockEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[d4]">mbed::Stream::~Stream__sub_object()</a> from .\build\stream.o(i._ZN4mbed6StreamD2Ev) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[c4]">mbed::Ticker::handler()</a> from .\build\ticker.o(i._ZN4mbed6Ticker7handlerEv) referenced from .\build\main.o(.constdata__ZTVN4mbed14LowPowerTickerE)
 <LI><a href="#[c4]">mbed::Ticker::handler()</a> from .\build\ticker.o(i._ZN4mbed6Ticker7handlerEv) referenced from .\build\ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[d7]">mbed::Ticker::~Ticker__deallocating()</a> from .\build\ticker.o(i._ZN4mbed6TickerD0Ev) referenced from .\build\ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[5e]">mbed::Ticker::~Ticker()</a> from .\build\ticker.o(i._ZN4mbed6TickerD1Ev) referenced from .\build\ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[5e]">mbed::Ticker::~Ticker()</a> from .\build\ticker.o(i._ZN4mbed6TickerD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led0_n)
 <LI><a href="#[d9]">mbed::Timeout::handler()</a> from .\build\timeout.o(i._ZN4mbed7Timeout7handlerEv) referenced from .\build\timeout.o(.constdata__ZTVN4mbed7TimeoutE)
 <LI><a href="#[d8]">mbed::Timeout::~Timeout__deallocating()</a> from .\build\timeout.o(i._ZN4mbed7TimeoutD0Ev) referenced from .\build\timeout.o(.constdata__ZTVN4mbed7TimeoutE)
 <LI><a href="#[58]">mbed::Timeout::~Timeout()</a> from .\build\arm_hal_timer.o(i._ZN4mbed7TimeoutD1Ev) referenced from .\build\timeout.o(.constdata__ZTVN4mbed7TimeoutE)
 <LI><a href="#[58]">mbed::Timeout::~Timeout()</a> from .\build\arm_hal_timer.o(i._ZN4mbed7TimeoutD1Ev) referenced from .\build\arm_hal_timer.o(i.__sti___17_arm_hal_timer_cpp_749a681d)
 <LI><a href="#[dd]">bool mbed::Callback&lang;bool(int, int)&rang;::function_call&lang;bool(*)(int, int)&rang;(const void*, int, int)</a> from .\build\cellularconnectionfsm.o(t._ZN4mbed8CallbackIFbiiEE13function_callIPS1_EEbPKvii) referenced from .\build\cellularconnectionfsm.o(.constdata__ZZN4mbed8CallbackIFbiiEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[df]">void mbed::Callback&lang;bool(int, int)&rang;::function_dtor&lang;bool(*)(int, int)&rang;(void*)</a> from .\build\cellularconnectionfsm.o(t._ZN4mbed8CallbackIFbiiEE13function_dtorIPS1_EEvPv) referenced from .\build\cellularconnectionfsm.o(.constdata__ZZN4mbed8CallbackIFbiiEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[de]">void mbed::Callback&lang;bool(int, int)&rang;::function_move&lang;bool(*)(int, int)&rang;(void*, const void*)</a> from .\build\cellularconnectionfsm.o(t._ZN4mbed8CallbackIFbiiEE13function_moveIPS1_EEvPvPKv) referenced from .\build\cellularconnectionfsm.o(.constdata__ZZN4mbed8CallbackIFbiiEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e0]">void mbed::Callback&lang;void(nsapi_event, int)&rang;::function_call&lang;void(*)(nsapi_event, int)&rang;(const void*, nsapi_event, int)</a> from .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFv11nsapi_eventiEE13function_callIPS2_EEvPKvS1_i) referenced from .\build\at_cellularnetwork.o(.constdata__ZZN4mbed8CallbackIFv11nsapi_eventiEE8generateIPS2_EEvRKT_E3ops)
 <LI><a href="#[e2]">void mbed::Callback&lang;void(nsapi_event, int)&rang;::function_dtor&lang;void(*)(nsapi_event, int)&rang;(void*)</a> from .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFv11nsapi_eventiEE13function_dtorIPS2_EEvPv) referenced from .\build\at_cellularnetwork.o(.constdata__ZZN4mbed8CallbackIFv11nsapi_eventiEE8generateIPS2_EEvRKT_E3ops)
 <LI><a href="#[e1]">void mbed::Callback&lang;void(nsapi_event, int)&rang;::function_move&lang;void(*)(nsapi_event, int)&rang;(void*, const void*)</a> from .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFv11nsapi_eventiEE13function_moveIPS2_EEvPvPKv) referenced from .\build\at_cellularnetwork.o(.constdata__ZZN4mbed8CallbackIFv11nsapi_eventiEE8generateIPS2_EEvRKT_E3ops)
 <LI><a href="#[56]">mbed::Callback&lang;void(nsapi_event, int)&rang;::~Callback()</a> from .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFv11nsapi_eventiEED1Ev) referenced from .\build\ppp_lwip.o(i.__sti___12_ppp_lwip_cpp_b3a13e7c)
 <LI><a href="#[e3]">void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</a> from .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi) referenced from .\build\eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e5]">void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</a> from .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv) referenced from .\build\eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e4]">void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</a> from .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv) referenced from .\build\eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e6]">void mbed::Callback&lang;void()&rang;::function_call&lang;mbed::Callback&lang;void()&rang;::method_context&lang;mbed::UARTSerial, void(mbed::UARTSerial::*)()&rang;&rang;(const void*)</a> from .\build\uartserial.o(t._ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvPKv) referenced from .\build\uartserial.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvRKT_E3ops)
 <LI><a href="#[e9]">void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</a> from .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv) referenced from .\build\arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e8]">void mbed::Callback&lang;void()&rang;::function_dtor&lang;mbed::Callback&lang;void()&rang;::method_context&lang;mbed::UARTSerial, void(mbed::UARTSerial::*)()&rang;&rang;(void*)</a> from .\build\uartserial.o(t._ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvPv) referenced from .\build\uartserial.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvRKT_E3ops)
 <LI><a href="#[eb]">void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</a> from .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv) referenced from .\build\arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e7]">void mbed::Callback&lang;void()&rang;::function_move&lang;mbed::Callback&lang;void()&rang;::method_context&lang;mbed::UARTSerial, void(mbed::UARTSerial::*)()&rang;&rang;(void*, const void*)</a> from .\build\uartserial.o(t._ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvPvPKv) referenced from .\build\uartserial.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvRKT_E3ops)
 <LI><a href="#[ea]">void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</a> from .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv) referenced from .\build\arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[54]">mbed::Callback&lang;void()&rang;::~Callback()</a> from .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEED1Ev) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev)
 <LI><a href="#[da]">mbed::FileBase::~FileBase()</a> from .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev) referenced from .\build\filebase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[db]">mbed::FileLike::~FileLike__sub_object()</a> from .\build\stream.o(i._ZN4mbed8FileLikeD2Ev) referenced from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[60]">rtos::Mutex::~Mutex()</a> from .\build\mutex.o(i._ZN4rtos5MutexD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led0_n)
 <LI><a href="#[61]">rtos::Thread::~Thread()</a> from .\build\thread.o(i._ZN4rtos6ThreadD1Ev) referenced from .\build\thread.o(.constdata__ZTVN4rtos6ThreadE)
 <LI><a href="#[61]">rtos::Thread::~Thread()</a> from .\build\thread.o(i._ZN4rtos6ThreadD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led0_n)
 <LI><a href="#[dc]">rtos::internal::SysTimer::handler()</a> from .\build\systimer.o(i._ZN4rtos8internal8SysTimer7handlerEv) referenced from .\build\systimer.o(.constdata__ZTVN4rtos8internal8SysTimerE)
 <LI><a href="#[8f]">CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))</a> from .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E) referenced from .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE4initEPS1_MS1_FvPvES4_)
 <LI><a href="#[5b]">PinDetect::~PinDetect()</a> from .\build\main.o(i._ZN9PinDetectD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led0_n)
 <LI><a href="#[bb]">thunk{-212} to mbed::UARTSerial::read(void*, unsigned)</a> from .\build\uartserial.o(i._ZThn212_N4mbed10UARTSerial4readEPvj) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[bd]">thunk{-212} to mbed::UARTSerial::seek(long, int)</a> from .\build\uartserial.o(i._ZThn212_N4mbed10UARTSerial4seekEli) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[be]">thunk{-212} to mbed::UARTSerial::close()</a> from .\build\uartserial.o(i._ZThn212_N4mbed10UARTSerial5closeEv) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[bc]">thunk{-212} to mbed::UARTSerial::write(const void*, unsigned)</a> from .\build\uartserial.o(i._ZThn212_N4mbed10UARTSerial5writeEPKvj) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[bf]">thunk{-212} to mbed::UARTSerial::isatty()</a> from .\build\uartserial.o(i._ZThn212_N4mbed10UARTSerial6isattyEv) referenced from .\build\uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
 <LI><a href="#[d2]">thunk{-212} to mbed::Serial::lock()</a> from .\build\serial.o(i._ZThn212_N4mbed6Serial4lockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[d1]">thunk{-212} to mbed::Serial::_getc()</a> from .\build\serial.o(i._ZThn212_N4mbed6Serial5_getcEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[d0]">thunk{-212} to mbed::Serial::_putc(int)</a> from .\build\serial.o(i._ZThn212_N4mbed6Serial5_putcEi) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[d3]">thunk{-212} to mbed::Serial::unlock()</a> from .\build\serial.o(i._ZThn212_N4mbed6Serial6unlockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a3]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 10 times from .\build\easycellularconnection.o(.constdata__ZTV12CellularBase)
 <LI><a href="#[a3]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 3 times from .\build\networkinterface.o(.constdata__ZTV16NetworkInterface)
 <LI><a href="#[a3]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 4 times from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[a3]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced from .\build\timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[a3]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 13 times from .\build\at_cellulardevice.o(.constdata__ZTVN4mbed14CellularDeviceE)
 <LI><a href="#[a3]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 2 times from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a3]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 4 times from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[f0]">__main</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main) referenced from .\build\startup_efm32wg.o(.text)
 <LI><a href="#[ed]">__sti___12_ppp_lwip_cpp_b3a13e7c</a> from .\build\ppp_lwip.o(i.__sti___12_ppp_lwip_cpp_b3a13e7c) referenced from .\build\ppp_lwip.o(.init_array)
 <LI><a href="#[ec]">__sti___17_arm_hal_timer_cpp_749a681d</a> from .\build\arm_hal_timer.o(i.__sti___17_arm_hal_timer_cpp_749a681d) referenced from .\build\arm_hal_timer.o(.init_array)
 <LI><a href="#[ee]">__sti___7_SPI_cpp_ab1f1164</a> from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164) referenced from .\build\spi.o(.init_array)
 <LI><a href="#[ef]">__sti___8_main_cpp_led0_n</a> from .\build\main.o(i.__sti___8_main_cpp_led0_n) referenced from .\build\main.o(.init_array)
 <LI><a href="#[4c]">_fputc$unlocked</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_file_locked.o)(.text)
 <LI><a href="#[45]">_get_lc_ctype</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text)
 <LI><a href="#[49]">_printf_input_char</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text)
 <LI><a href="#[48]">_sbackspace</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__0sscanf.o)(.text)
 <LI><a href="#[4a]">_scanf_char_input</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text)
 <LI><a href="#[47]">_sgetc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__0sscanf.o)(.text)
 <LI><a href="#[46]">_snputc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text) referenced 2 times from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text)
 <LI><a href="#[4b]">isspace</a> from .\build\greentea_test_env.o(i.isspace) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text)
 <LI><a href="#[84]">leuart0_irq</a> from .\build\serial_api.o(i.leuart0_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[85]">leuart1_irq</a> from .\build\serial_api.o(i.leuart1_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[93]">lp_ticker_clear_interrupt</a> from .\build\lp_ticker.o(i.lp_ticker_clear_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[92]">lp_ticker_disable_interrupt</a> from .\build\lp_ticker.o(i.lp_ticker_disable_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[95]">lp_ticker_fire_interrupt</a> from .\build\lp_ticker.o(i.lp_ticker_fire_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[96]">lp_ticker_get_info</a> from .\build\mbed_retarget.o(i.lp_ticker_get_info) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[90]">lp_ticker_init</a> from .\build\lp_ticker.o(i.lp_ticker_init) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[62]">lp_ticker_irq_handler</a> from .\build\mbed_lp_ticker_api.o(i.lp_ticker_irq_handler) referenced from .\build\lp_ticker.o(i.lp_ticker_init)
 <LI><a href="#[91]">lp_ticker_read</a> from .\build\lp_ticker.o(i.lp_ticker_read) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[94]">lp_ticker_set_interrupt</a> from .\build\lp_ticker.o(i.lp_ticker_set_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[42]">mbed_fault_handler</a> from .\build\mbed_rtx_fault_handler.o(i.mbed_fault_handler) referenced from .\build\except.o(.text)
 <LI><a href="#[86]">osRtxEventFlagsPostProcess</a> from .\build\rtx_evflags.o(i.osRtxEventFlagsPostProcess) referenced from .\build\rtx_evflags.o(i.svcRtxEventFlagsNew)
 <LI><a href="#[87]">osRtxIdleThread</a> from .\build\mbed_rtx_handlers.o(i.osRtxIdleThread) referenced from .\build\rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[89]">osRtxMessageQueuePostProcess</a> from .\build\rtx_msgqueue.o(i.osRtxMessageQueuePostProcess) referenced from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew)
 <LI><a href="#[8a]">osRtxSemaphorePostProcess</a> from .\build\rtx_semaphore.o(i.osRtxSemaphorePostProcess) referenced from .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew)
 <LI><a href="#[8c]">osRtxThreadPostProcess</a> from .\build\rtx_thread.o(i.osRtxThreadPostProcess) referenced from .\build\rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[88]">osRtxTimerThread</a> from .\build\rtx_timer.o(i.osRtxTimerThread) referenced from .\build\rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[71]">osRtxTimerTick</a> from .\build\rtx_timer.o(i.osRtxTimerTick) referenced from .\build\rtx_timer.o(i.osRtxTimerThread)
 <LI><a href="#[8b]">osThreadExit</a> from .\build\rtx_thread.o(i.osThreadExit) referenced from .\build\rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[63]">pre_main</a> from .\build\mbed_boot.o(i.pre_main) referenced from .\build\mbed_boot.o(i.mbed_start_main)
 <LI><a href="#[64]">svcRtxDelay</a> from .\build\rtx_delay.o(i.svcRtxDelay) referenced from .\build\rtx_delay.o(i.osDelay)
 <LI><a href="#[65]">svcRtxEventFlagsDelete</a> from .\build\rtx_evflags.o(i.svcRtxEventFlagsDelete) referenced from .\build\rtx_evflags.o(i.osEventFlagsDelete)
 <LI><a href="#[66]">svcRtxEventFlagsNew</a> from .\build\rtx_evflags.o(i.svcRtxEventFlagsNew) referenced from .\build\rtx_evflags.o(i.osEventFlagsNew)
 <LI><a href="#[67]">svcRtxKernelGetState</a> from .\build\rtx_kernel.o(i.svcRtxKernelGetState) referenced from .\build\rtx_kernel.o(i.osKernelGetState)
 <LI><a href="#[68]">svcRtxKernelInitialize</a> from .\build\rtx_kernel.o(i.svcRtxKernelInitialize) referenced from .\build\rtx_kernel.o(i.osKernelInitialize)
 <LI><a href="#[69]">svcRtxKernelStart</a> from .\build\rtx_kernel.o(i.svcRtxKernelStart) referenced from .\build\rtx_kernel.o(i.osKernelStart)
 <LI><a href="#[6a]">svcRtxMessageQueueGet</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueGet) referenced from .\build\rtx_msgqueue.o(i.osMessageQueueGet)
 <LI><a href="#[6b]">svcRtxMessageQueueNew</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew) referenced from .\build\rtx_msgqueue.o(i.osMessageQueueNew)
 <LI><a href="#[6c]">svcRtxMessageQueuePut</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueuePut) referenced from .\build\rtx_msgqueue.o(i.osMessageQueuePut)
 <LI><a href="#[6d]">svcRtxMutexAcquire</a> from .\build\rtx_mutex.o(i.svcRtxMutexAcquire) referenced from .\build\rtx_mutex.o(i.osMutexAcquire)
 <LI><a href="#[6e]">svcRtxMutexDelete</a> from .\build\rtx_mutex.o(i.svcRtxMutexDelete) referenced from .\build\rtx_mutex.o(i.osMutexDelete)
 <LI><a href="#[6f]">svcRtxMutexNew</a> from .\build\rtx_mutex.o(i.svcRtxMutexNew) referenced from .\build\rtx_mutex.o(i.osMutexNew)
 <LI><a href="#[70]">svcRtxMutexRelease</a> from .\build\rtx_mutex.o(i.svcRtxMutexRelease) referenced from .\build\rtx_mutex.o(i.osMutexRelease)
 <LI><a href="#[72]">svcRtxSemaphoreDelete</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreDelete) referenced from .\build\rtx_semaphore.o(i.osSemaphoreDelete)
 <LI><a href="#[73]">svcRtxSemaphoreNew</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew) referenced from .\build\rtx_semaphore.o(i.osSemaphoreNew)
 <LI><a href="#[74]">svcRtxSemaphoreRelease</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreRelease) referenced from .\build\rtx_semaphore.o(i.osSemaphoreRelease)
 <LI><a href="#[76]">svcRtxThreadExit</a> from .\build\rtx_thread.o(i.svcRtxThreadExit) referenced from .\build\rtx_thread.o(i.osThreadExit)
 <LI><a href="#[77]">svcRtxThreadGetId</a> from .\build\rtx_thread.o(i.svcRtxThreadGetId) referenced from .\build\rtx_thread.o(i.osThreadGetId)
 <LI><a href="#[78]">svcRtxThreadGetName</a> from .\build\rtx_thread.o(i.svcRtxThreadGetName) referenced from .\build\rtx_thread.o(i.osThreadGetName)
 <LI><a href="#[75]">svcRtxThreadNew</a> from .\build\rtx_thread.o(i.svcRtxThreadNew) referenced from .\build\rtx_thread.o(i.osThreadContextNew)
 <LI><a href="#[79]">svcRtxThreadTerminate</a> from .\build\rtx_thread.o(i.svcRtxThreadTerminate) referenced from .\build\rtx_thread.o(i.osThreadTerminate)
 <LI><a href="#[e]">ticker_irq_handler</a> from .\build\mbed_ticker_api.o(i.ticker_irq_handler) referenced 4 times from .\build\mbed_lp_ticker_api.o(.data)
 <LI><a href="#[7a]">uart0_rx_irq</a> from .\build\serial_api.o(i.uart0_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[7b]">uart0_tx_irq</a> from .\build\serial_api.o(i.uart0_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[7c]">uart1_rx_irq</a> from .\build\serial_api.o(i.uart1_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[7d]">uart1_tx_irq</a> from .\build\serial_api.o(i.uart1_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[9a]">us_ticker_clear_interrupt</a> from .\build\us_ticker.o(i.us_ticker_clear_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[99]">us_ticker_disable_interrupt</a> from .\build\us_ticker.o(i.us_ticker_disable_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[9c]">us_ticker_fire_interrupt</a> from .\build\us_ticker.o(i.us_ticker_fire_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[9d]">us_ticker_get_info</a> from .\build\mbed_retarget.o(i.us_ticker_get_info) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[97]">us_ticker_init</a> from .\build\us_ticker.o(i.us_ticker_init) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[8d]">us_ticker_irq_handler_internal</a> from .\build\us_ticker.o(i.us_ticker_irq_handler_internal) referenced from .\build\us_ticker.o(i.us_ticker_init)
 <LI><a href="#[98]">us_ticker_read</a> from .\build\us_ticker.o(i.us_ticker_read) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[9b]">us_ticker_set_interrupt</a> from .\build\us_ticker.o(i.us_ticker_set_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[7e]">usart0_rx_irq</a> from .\build\serial_api.o(i.usart0_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[7f]">usart0_tx_irq</a> from .\build\serial_api.o(i.usart0_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[80]">usart1_rx_irq</a> from .\build\serial_api.o(i.usart1_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[81]">usart1_tx_irq</a> from .\build\serial_api.o(i.usart1_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[82]">usart2_rx_irq</a> from .\build\serial_api.o(i.usart2_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[83]">usart2_tx_irq</a> from .\build\serial_api.o(i.usart2_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[f0]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; mbed_sdk_init &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f4]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f6]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3c7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[3c8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[3c9]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__dczerorl2.o)(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3ca]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__dczerorl2.o)(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3cb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter_zi.o)(!!handler_zi), UNUSED)

<P><STRONG><a name="[f7]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_n.o)(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[147]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_percent.o)(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f9]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_p.o)(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[fb]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_f.o)(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[fd]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_e.o)(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[fe]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_g.o)(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ff]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_a.o)(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[3cc]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_ll.o)(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[101]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_i.o)(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[103]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_d.o)(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[104]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_u.o)(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[105]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_o.o)(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[107]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_x.o)(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[109]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lli.o)(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[10b]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lld.o)(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[10c]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llu.o)(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[10d]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llo.o)(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[10f]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llx.o)(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[3cd]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_l.o)(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[111]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_c.o)(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[113]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_s.o)(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[115]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lc.o)(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[117]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_ls.o)(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[3ce]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_percent_end.o)(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[375]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit.o)(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[119]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[11b]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3cf]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3d0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[3d1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3d2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3d3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3d4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3d5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[120]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[3d6]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3d7]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3d8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3d9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[3da]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3db]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3dc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[122]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3dd]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3de]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[124]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[3df]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3e0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[3e1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[3e2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[3e3]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e4]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[3e5]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3e6]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e7]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[1b6]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>

<P><STRONG><a name="[1b7]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>

<P><STRONG><a name="[3e8]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e9]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ea]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3eb]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ec]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ed]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ee]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[125]"></a>__asm___13_rtx_evflags_c_736f7bde__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_736f7bde__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_736f7bde__atomic_link_put
</UL>

<P><STRONG><a name="[3ef]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f0]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f1]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f2]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f3]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f4]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[334]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[3f5]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f6]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[338]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[3f7]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[335]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[126]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>

<P><STRONG><a name="[1d3]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[3f8]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f9]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3fa]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3fb]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[3fc]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3fd]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3fe]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[3ff]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[400]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[127]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_link_put
</UL>

<P><STRONG><a name="[401]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[402]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[403]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[404]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[405]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[406]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[407]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[1df]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>

<P><STRONG><a name="[408]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[409]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[40a]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[128]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_eca73427__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_eca73427__atomic_link_put
</UL>

<P><STRONG><a name="[40b]"></a>__asm___12_rtx_system_c_024f2f18__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[40c]"></a>__asm___12_rtx_system_c_024f2f18__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[40d]"></a>__asm___12_rtx_system_c_024f2f18__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[40e]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[40f]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[410]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[411]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f0]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[2ee]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[412]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ed]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[413]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[129]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>

<P><STRONG><a name="[414]"></a>__asm___12_rtx_thread_c_add96be5__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[415]"></a>__asm___12_rtx_thread_c_add96be5__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[416]"></a>__asm___12_rtx_thread_c_add96be5__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[1e6]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[417]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[418]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[419]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[41a]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[41b]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[41c]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[41d]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[12a]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[41e]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(maybetermalloc2.o)(.emb_text), UNUSED)

<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>Fault_Handler</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, .\build\irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; OS_Tick_AcknowledgeIRQ &rArr; rtos::internal::SysTimer::schedule_tick(unsigned) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> systimer.o(i._ZN4rtos8internal8SysTimer9setup_irqEv)
<LI> rtx_kernel.o(i.svcRtxKernelStart)
<LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>BURTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EBI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FPUEH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LESENSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LETIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>LEUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LEUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>MSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PCNT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PCNT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PCNT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>USART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>VCMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[41f]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\startup_efm32wg.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unbind_from_fd(int, mbed::FileHandle*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[420]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[421]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[131]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[134]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[136]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_free_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[137]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_free_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_destroy
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[283]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_read
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::update_tick()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
</UL>

<P><STRONG><a name="[422]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llshl.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[423]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llshl.o)(.text), UNUSED)

<P><STRONG><a name="[138]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>

<P><STRONG><a name="[13b]"></a>__c89vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(c89vfprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[13d]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(c89vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
</UL>

<P><STRONG><a name="[13f]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[140]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[13e]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[102]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[144]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[108]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[110]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[fa]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[145]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__printf_flags_ss_wp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[148]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__0sscanf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSSI()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMEID()
</UL>

<P><STRONG><a name="[14a]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf_int.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[189]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[14c]"></a>setbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(setbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setbuf &rArr; setvbuf &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>

<P><STRONG><a name="[424]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose.o)(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[152]"></a>fgetc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fgetc_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fgetc &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_getc(std::__FILE*)
</UL>

<P><STRONG><a name="[154]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[155]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[157]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[15a]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[15b]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
</UL>

<P><STRONG><a name="[295]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strspn.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[205]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strlen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
</UL>

<P><STRONG><a name="[1f9]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strncmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGMMResponse()
</UL>

<P><STRONG><a name="[2e4]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[15d]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[425]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_enter_DefaultMode_from_RESET()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_enter_DefaultMode_from_RESET()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[426]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[427]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[428]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[15f]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[429]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::CellularConnectionFSM()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[42a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[160]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[22f]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strcmpv7m.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAPN()
</UL>

<P><STRONG><a name="[42c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_aeabi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(aeabi_vec_dtor_noexceptions.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)4, unsigned&rang;::~CircularBuffer()
</UL>

<P><STRONG><a name="[42d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libspace.o)(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libspace.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[135]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_heap_descriptor_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[11e]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_locale_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[42e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[42f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[163]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[11c]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[165]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_init_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_init_mt.o)(.text), UNUSED)

<P><STRONG><a name="[141]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[142]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[143]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_intcommon.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f8]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_charcount.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[430]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[139]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[13a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sputc.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[46]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[16f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[112]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[114]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[170]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wctomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[10a]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_longlong_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[172]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[106]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[10e]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[14b]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_chval.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[149]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[47]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[17b]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[177]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2d5]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>

<P><STRONG><a name="[431]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2d7]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[432]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)

<P><STRONG><a name="[156]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _fseek &rArr; _sys_istty &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[433]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek.o)(.text), UNUSED)

<P><STRONG><a name="[176]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[17f]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[14f]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[178]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[14d]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(setvbuf_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[123]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(initio_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[183]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(initio_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[184]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_pvfn_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[190]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(sys_wrch.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[18a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(sys_exit.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[162]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_extend_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[16b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludiv10.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[187]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_hex.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[16e]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[13c]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_file_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>

<P><STRONG><a name="[188]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[116]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[118]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[173]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[167]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(bigflt0.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[180]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ftell.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[434]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ftell.o)(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flushlinebuffered_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[171]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_wcrtomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[186]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_exit.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[182]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtred_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[164]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtmem_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[185]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_pvfn_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[435]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[436]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[437]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(indicate_semi.o)(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(term_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[18d]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_general.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[18b]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtred_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[18c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtmem_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[18f]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_final_mt.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[168]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[192]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[191]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[193]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[194]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[169]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[16a]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[195]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[196]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; PWP_SW_BG96_test() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[19a]"></a>CMU_ClockDivSet</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, .\build\em_cmu.o(i.CMU_ClockDivSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CMU_ClockDivSet &rArr; CMU_UpdateWaitStates &rArr; flashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncReg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHfLeConfig
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DivToLog2
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_UpdateWaitStates
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_real
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
</UL>

<P><STRONG><a name="[1a2]"></a>CMU_ClockEnable</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, .\build\em_cmu.o(i.CMU_ClockEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMU_ClockEnable &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncReg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHfLeConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_real
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[1a3]"></a>CMU_ClockFreqGet</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.CMU_ClockFreqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbCClkGet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DivToLog2
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
</UL>

<P><STRONG><a name="[2c7]"></a>CMU_ClockSelectGet</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.CMU_ClockSelectGet))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbCClkGet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emState
</UL>

<P><STRONG><a name="[1a9]"></a>CMU_ClockSelectSet</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, .\build\em_cmu.o(i.CMU_ClockSelectSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CMU_ClockSelectSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHfLeConfig
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockGet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_UpdateWaitStates
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emState
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[1ab]"></a>CMU_OscillatorEnable</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, .\build\em_cmu.o(i.CMU_OscillatorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CMU_OscillatorEnable &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[19d]"></a>CMU_UpdateWaitStates</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.CMU_UpdateWaitStates))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMU_UpdateWaitStates &rArr; flashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>

<P><STRONG><a name="[1ae]"></a>CORE_EnterCritical</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\em_core.o(i.CORE_EnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CORE_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
</UL>

<P><STRONG><a name="[1b4]"></a>CORE_ExitCritical</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\em_core.o(i.CORE_ExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
</UL>

<P><STRONG><a name="[396]"></a>DMA_ChannelEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\em_dma.o(i.DMA_ChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
</UL>

<P><STRONG><a name="[1a]"></a>DMA_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, .\build\em_dma.o(i.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>EMU_EnterEM2</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, .\build\em_emu.o(i.EMU_EnterEM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EMU_EnterEM2 &rArr; emState &rArr; CMU_ClockSelectSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramWFI
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getErrataFixEmuE107En
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emState
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_ExitCritical
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_EnterCritical
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
</UL>

<P><STRONG><a name="[3a5]"></a>EvrRtxEventFlagsCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxEventFlagsCreated))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
</UL>

<P><STRONG><a name="[308]"></a>EvrRtxEventFlagsDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxEventFlagsDelete))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
</UL>

<P><STRONG><a name="[3a4]"></a>EvrRtxEventFlagsDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxEventFlagsDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
</UL>

<P><STRONG><a name="[30c]"></a>EvrRtxEventFlagsError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxEventFlagsError))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
</UL>

<P><STRONG><a name="[30d]"></a>EvrRtxEventFlagsNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxEventFlagsNew))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[32b]"></a>EvrRtxEventFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxEventFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
</UL>

<P><STRONG><a name="[348]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[315]"></a>EvrRtxKernelError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelError))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[312]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[314]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[3a6]"></a>EvrRtxKernelInitializeCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelInitializeCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[3a7]"></a>EvrRtxKernelResumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelResumed))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
</UL>

<P><STRONG><a name="[316]"></a>EvrRtxKernelStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[3a9]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelStarted))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[3aa]"></a>EvrRtxKernelSuspended</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelSuspended))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
</UL>

<P><STRONG><a name="[32e]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[333]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryBlockAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[337]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryBlockFree))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[33a]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryBlockInit))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[330]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryFree))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[332]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[34b]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[3ad]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueCreated))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[2e3]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueError))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[318]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueGet))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[3ab]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueGetPending))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[34c]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2eb]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueInsertPending))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[33e]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueInserted))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[31d]"></a>EvrRtxMessageQueueNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[2ea]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueNotInserted))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[2e7]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[31f]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueuePut))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[3ae]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueuePutPending))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[34d]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2e5]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[320]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[3af]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[349]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[341]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[3b2]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexCreated))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[325]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexDelete))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[3b1]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[324]"></a>EvrRtxMutexError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexError))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[326]"></a>EvrRtxMutexNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[3b0]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[327]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[340]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexReleased))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[34a]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[343]"></a>EvrRtxSemaphoreAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[3b4]"></a>EvrRtxSemaphoreCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreCreated))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[361]"></a>EvrRtxSemaphoreDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreDelete))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[3b3]"></a>EvrRtxSemaphoreDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[365]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreError))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[366]"></a>EvrRtxSemaphoreNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[367]"></a>EvrRtxSemaphoreRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreRelease))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[368]"></a>EvrRtxSemaphoreReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreReleased))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[35b]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[3b8]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadCreated))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[306]"></a>EvrRtxThreadDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadDelay))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[345]"></a>EvrRtxThreadDelayCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadDelayCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[3b7]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[307]"></a>EvrRtxThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[1b8]"></a>EvrRtxThreadExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadExit &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[357]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[346]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[36e]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[36f]"></a>EvrRtxThreadGetName</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadGetName))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetName
</UL>

<P><STRONG><a name="[3b5]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadJoined))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[36a]"></a>EvrRtxThreadNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[359]"></a>EvrRtxThreadSwitch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[1bb]"></a>EvrRtxThreadTerminate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadTerminate &rArr; thread_terminate_hook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[34e]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadUnblocked))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[35e]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxTimerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[1b]"></a>GPIO_EVEN_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\gpio_irq_api.o(i.GPIO_EVEN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_EVEN_IRQHandler &rArr; GPIOINT_IRQDispatcher &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntGetEnabled
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntClear
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOINT_IRQDispatcher
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPIO_ODD_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\gpio_irq_api.o(i.GPIO_ODD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ODD_IRQHandler &rArr; GPIOINT_IRQDispatcher &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntGetEnabled
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntClear
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOINT_IRQDispatcher
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>GPIO_PinModeSet</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, .\build\em_gpio.o(i.GPIO_PinModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[1c8]"></a>LEUART_BaudrateCalc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_BaudrateCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_BaudrateCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
</UL>

<P><STRONG><a name="[1c7]"></a>LEUART_BaudrateGet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_BaudrateGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LEUART_BaudrateGet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_unblock_sleep
</UL>

<P><STRONG><a name="[1c9]"></a>LEUART_BaudrateSet</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\em_leuart.o(i.LEUART_BaudrateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
</UL>

<P><STRONG><a name="[1cb]"></a>LEUART_Enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable
</UL>

<P><STRONG><a name="[1cd]"></a>LEUART_FreezeEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\em_leuart.o(i.LEUART_FreezeEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
</UL>

<P><STRONG><a name="[1cc]"></a>LEUART_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LEUART_Init &rArr; LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_FreezeEnable
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[383]"></a>LEUART_Rx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\em_leuart.o(i.LEUART_Rx))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>

<P><STRONG><a name="[1ce]"></a>LEUART_RxDmaInEM2Enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_RxDmaInEM2Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_RxDmaInEM2Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[1cf]"></a>LEUART_Tx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
</UL>

<P><STRONG><a name="[1d0]"></a>LEUART_TxDmaInEM2Enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_TxDmaInEM2Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_TxDmaInEM2Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[1d6]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OS_Tick_AcknowledgeIRQ &rArr; rtos::internal::SysTimer::schedule_tick(unsigned) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1c4]"></a>OS_Tick_Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(i.OS_Tick_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OS_Tick_Disable &rArr; rtos::internal::SysTimer::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::cancel_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelBlock
</UL>

<P><STRONG><a name="[1c6]"></a>OS_Tick_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(i.OS_Tick_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OS_Tick_Enable &rArr; rtos::internal::SysTimer::SysTimer() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::SysTimer()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::setup_irq()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelUnblock
</UL>

<P><STRONG><a name="[3a8]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(i.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[2a6]"></a>OS_Tick_Setup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\os_systick.o(i.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::setup_irq()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[379]"></a>RTC_CompareSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\em_rtc.o(i.RTC_CompareSet))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_comp0_value
</UL>

<P><STRONG><a name="[376]"></a>RTC_FreezeEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\em_rtc.o(i.RTC_FreezeEnable))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_comp0_value
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_comp0
</UL>

<P><STRONG><a name="[38]"></a>RTC_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, .\build\rtc_api.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IntClear
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtc_api.o(i.rtc_init_real)
<LI> startup_efm32wg.o(RESET)
</UL>
<P><STRONG><a name="[378]"></a>RTC_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\em_rtc.o(i.RTC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_real
</UL>

<P><STRONG><a name="[19c]"></a>SystemCoreClockGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, .\build\system_efm32wg.o(i.SystemCoreClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockSet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockSet
</UL>

<P><STRONG><a name="[19f]"></a>SystemHFClockGet</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, .\build\system_efm32wg.o(i.SystemHFClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbCClkGet
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>

<P><STRONG><a name="[1aa]"></a>SystemHFXOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\system_efm32wg.o(i.SystemHFXOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[1e0]"></a>SystemHFXOClockSet</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, .\build\system_efm32wg.o(i.SystemHFXOClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemHFXOClockSet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFXO_enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\system_efm32wg.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32wg.o(.text)
</UL>
<P><STRONG><a name="[2f4]"></a>SystemLFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\system_efm32wg.o(i.SystemLFRCOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbCClkGet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[2f5]"></a>SystemLFXOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\system_efm32wg.o(i.SystemLFXOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbCClkGet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[1e1]"></a>SystemLFXOClockSet</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, .\build\system_efm32wg.o(i.SystemLFXOClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemLFXOClockSet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[2d6]"></a>SystemMaxCoreClockGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\system_efm32wg.o(i.SystemMaxCoreClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
</UL>

<P><STRONG><a name="[2f6]"></a>SystemULFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\system_efm32wg.o(i.SystemULFRCOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[1e2]"></a>TIMER_InitCC</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, .\build\em_timer.o(i.TIMER_InitCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_InitCC
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Valid
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[1e7]"></a>USART_BaudrateAsyncSet</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, .\build\em_usart.o(i.USART_BaudrateAsyncSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[37d]"></a>USART_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\em_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable
</UL>

<P><STRONG><a name="[1e8]"></a>USART_InitAsync</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\em_usart.o(i.USART_InitAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Reset
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_enter_DefaultMode_from_RESET()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_enter_DefaultMode_from_RESET()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[22e]"></a>USART_InitPrsTrigger</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\em_usart.o(i.USART_InitPrsTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_enter_DefaultMode_from_RESET()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_enter_DefaultMode_from_RESET()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[1e9]"></a>USART_Reset</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, .\build\em_usart.o(i.USART_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
</UL>

<P><STRONG><a name="[384]"></a>USART_Rx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\em_usart.o(i.USART_Rx))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>

<P><STRONG><a name="[395]"></a>USART_Tx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\em_usart.o(i.USART_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
</UL>

<P><STRONG><a name="[1ea]"></a>blink_leds(int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\main.o(i._Z10blink_ledsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = blink_leds(int) &rArr; wait &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSkywireModel()
</UL>

<P><STRONG><a name="[1ed]"></a>wait_print(int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\main.o(i._Z10wait_printi))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = wait_print(int) &rArr; wait &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[210]"></a>ClearBuffer()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\main.o(i._Z11ClearBufferv))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSSI()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMEID()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[1f3]"></a>send_string(char*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\main.o(i._Z11send_stringPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_string(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
</UL>

<P><STRONG><a name="[204]"></a>DataAvailable()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\main.o(i._Z13DataAvailablev))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMEID()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAPN()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
</UL>

<P><STRONG><a name="[1f7]"></a>GetGMMResponse()</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, .\build\main.o(i._Z14GetGMMResponsev))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = GetGMMResponse() &rArr; read_line() &rArr; mbed::Timer::start() &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSkywireModel()
</UL>

<P><STRONG><a name="[1fd]"></a>GetSkywireModel()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\main.o(i._Z15GetSkywireModelv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = GetSkywireModel() &rArr; blink_leds(int) &rArr; wait &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGMMResponse()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink_leds(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[1ff]"></a>WaitForResponse(const char*)</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, .\build\main.o(i._Z15WaitForResponsePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = WaitForResponse(const char*) &rArr; wait &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAvailable()
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSSI()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMEID()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAPN()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[4e]"></a>watchdog_wakeup()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\main.o(i._Z15watchdog_wakeupv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z16PWP_SW_BG96_testv)
</UL>
<P><STRONG><a name="[20a]"></a>PWP_SW_BG96_test()</STRONG> (Thumb, 922 bytes, Stack size 40 bytes, .\build\main.o(i._Z16PWP_SW_BG96_testv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = PWP_SW_BG96_test() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSSI()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMEID()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAPN()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSkywireModel()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBuffer()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_print(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2fd]"></a>setupSWOForPrint()</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, .\build\main.o(i._Z16setupSWOForPrintv))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[4f]"></a>Skywire_Rx_interrupt()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, .\build\main.o(i._Z20Skywire_Rx_interruptv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Skywire_Rx_interrupt() &rArr; mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z16PWP_SW_BG96_testv)
</UL>
<P><STRONG><a name="[226]"></a>enter_DefaultMode_from_RESET()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\initdevice.o(i._Z28enter_DefaultMode_from_RESETv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = enter_DefaultMode_from_RESET() &rArr; USART2_enter_DefaultMode_from_RESET() &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_enter_DefaultMode_from_RESET()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_enter_DefaultMode_from_RESET()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_enter_DefaultMode_from_RESET()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_enter_DefaultMode_from_RESET()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTIO_enter_DefaultMode_from_RESET()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFXO_enter_DefaultMode_from_RESET()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_enter_DefaultMode_from_RESET()
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[228]"></a>CMU_enter_DefaultMode_from_RESET()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, .\build\initdevice.o(i._Z32CMU_enter_DefaultMode_from_RESETv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CMU_enter_DefaultMode_from_RESET() &rArr; CMU_ClockSelectSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[227]"></a>HFXO_enter_DefaultMode_from_RESET()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\initdevice.o(i._Z33HFXO_enter_DefaultMode_from_RESETv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HFXO_enter_DefaultMode_from_RESET() &rArr; SystemHFXOClockSet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockSet
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[22d]"></a>PORTIO_enter_DefaultMode_from_RESET()</STRONG> (Thumb, 746 bytes, Stack size 0 bytes, .\build\initdevice.o(i._Z35PORTIO_enter_DefaultMode_from_RESETv))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[229]"></a>USART0_enter_DefaultMode_from_RESET()</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, .\build\initdevice.o(i._Z35USART0_enter_DefaultMode_from_RESETv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART0_enter_DefaultMode_from_RESET() &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitPrsTrigger
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[22a]"></a>USART1_enter_DefaultMode_from_RESET()</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, .\build\initdevice.o(i._Z35USART1_enter_DefaultMode_from_RESETv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART1_enter_DefaultMode_from_RESET() &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitPrsTrigger
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[22b]"></a>USART2_enter_DefaultMode_from_RESET()</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, .\build\initdevice.o(i._Z35USART2_enter_DefaultMode_from_RESETv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART2_enter_DefaultMode_from_RESET() &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitPrsTrigger
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[22c]"></a>LEUART0_enter_DefaultMode_from_RESET()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, .\build\initdevice.o(i._Z36LEUART0_enter_DefaultMode_from_RESETv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LEUART0_enter_DefaultMode_from_RESET() &rArr; LEUART_Init &rArr; LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_TxDmaInEM2Enable
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_RxDmaInEM2Enable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET()
</UL>

<P><STRONG><a name="[1ee]"></a>print(const char*, ...)</STRONG> (Thumb, 38 bytes, Stack size 160 bytes, .\build\main.o(i._Z5printPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = print(const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_string(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSSI()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMEID()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAPN()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSkywireModel()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGMMResponse()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_print(int)
</UL>

<P><STRONG><a name="[212]"></a>AutoAPN()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, .\build\main.o(i._Z7AutoAPNv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = AutoAPN() &rArr; WaitForResponse(const char*) &rArr; wait &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAvailable()
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[211]"></a>GetMEID()</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, .\build\main.o(i._Z7GetMEIDv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = GetMEID() &rArr; WaitForResponse(const char*) &rArr; wait &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAvailable()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[213]"></a>GetRSSI()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\main.o(i._Z7GetRSSIv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = GetRSSI() &rArr; WaitForResponse(const char*) &rArr; wait &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[1f8]"></a>read_line()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, .\build\main.o(i._Z9read_linev))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = read_line() &rArr; mbed::Timer::start() &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMEID()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAPN()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGMMResponse()
</UL>

<P><STRONG><a name="[438]"></a>CellularBase::~CellularBase()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\easycellularconnection.o(i._ZN12CellularBaseD2Ev), UNUSED)

<P><STRONG><a name="[a2]"></a>CellularBase::~CellularBase__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\easycellularconnection.o(i._ZN12CellularBaseD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::~EasyCellularConnection()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easycellularconnection.o(.constdata__ZTV12CellularBase)
</UL>
<P><STRONG><a name="[a4]"></a>DirectSerial::read(void*, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DirectSerial::read(void*, unsigned) &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[a6]"></a>DirectSerial::seek(long, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial4seekEli))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[a9]"></a>DirectSerial::size()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial4sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[a7]"></a>DirectSerial::close()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial5closeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[a5]"></a>DirectSerial::write(const void*, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DirectSerial::write(const void*, unsigned) &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[a8]"></a>DirectSerial::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[207]"></a>DirectSerial::DirectSerial(PinName, PinName, int)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialC1E7PinNameS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
</UL>

<P><STRONG><a name="[439]"></a>DirectSerial::DirectSerial__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialC1E7PinNameS0_i), UNUSED)

<P><STRONG><a name="[4d]"></a>DirectSerial::~DirectSerial()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DirectSerial::~DirectSerial()
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mbed_retarget.o(i._Z15default_consolev)
<LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[43a]"></a>DirectSerial::~DirectSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev), UNUSED)

<P><STRONG><a name="[235]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\busout.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr;  gpio_init_out_ex (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[43b]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\busout.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[1eb]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\main.o(i._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::DigitalOut::operator =(int) &rArr; gpio_write
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink_leds(int)
</UL>

<P><STRONG><a name="[ac]"></a>mbed::FileHandle::size()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::size()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
<LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[ab]"></a>mbed::FileHandle::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[43c]"></a>mbed::FileHandle::~FileHandle()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandleD2Ev), UNUSED)

<P><STRONG><a name="[aa]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandleD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::~DirectSerial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[238]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_getc()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::rx_irq()
</UL>

<P><STRONG><a name="[239]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
</UL>

<P><STRONG><a name="[53]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[9e]"></a>mbed::SerialBase::interrupt_handler_asynch()</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase24interrupt_handler_asynchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::interrupt_handler_asynch() &rArr; mbed::Callback&lang;void(int)&rang;::call(int) const &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::operator bool() const
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::call(int) const
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>mbed::SerialBase::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[20e]"></a>mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::UARTSerial(PinName, PinName, int)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::rx_irq()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[ae]"></a>mbed::SerialBase::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[225]"></a>mbed::SerialBase::readable()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase8readableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::SerialBase::readable()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::rx_irq()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Skywire_Rx_interrupt()
</UL>

<P><STRONG><a name="[244]"></a>mbed::SerialBase::writeable()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase9writeableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::SerialBase::writeable()
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
</UL>

<P><STRONG><a name="[246]"></a>mbed::SerialBase::SerialBase(PinName, PinName, int)</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CThunk&lang;mbed::SerialBase&rang;::init(mbed::SerialBase*, void(mbed::SerialBase::*)(void*), void*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::UARTSerial(PinName, PinName, int)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[43d]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[af]"></a>mbed::SerialBase::~SerialBase()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::~SerialBase() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::~UARTSerial()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[43e]"></a>mbed::SerialBase::~SerialBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev), UNUSED)

<P><STRONG><a name="[24d]"></a>mbed::TimerEvent::insert_absolute(unsigned long long)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEvent15insert_absoluteEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[55]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEvent3irqEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::TimerEvent::irq(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timerevent.o(i._ZN4mbed10TimerEventC2Ev)
<LI> timerevent.o(i._ZN4mbed10TimerEventC2EPK13ticker_data_t)
</UL>
<P><STRONG><a name="[24f]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::cancel_tick()
</UL>

<P><STRONG><a name="[251]"></a>mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventC2EPK13ticker_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::SysTimer()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::LowPowerTicker::LowPowerTicker()
</UL>

<P><STRONG><a name="[216]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_arm_hal_timer_cpp_749a681d
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick_init()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
</UL>

<P><STRONG><a name="[43f]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventD2Ev), UNUSED)

<P><STRONG><a name="[b0]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::~Timeout()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[ba]"></a>mbed::UARTSerial::api_unlock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial10api_unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::UARTSerial::api_unlock() &rArr; rtos::Mutex::unlock() &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[b1]"></a>mbed::UARTSerial::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[b5]"></a>mbed::UARTSerial::read(void*, unsigned)</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = mbed::UARTSerial::read(void*, unsigned) &rArr; mbed::UARTSerial::rx_irq() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::empty() const
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::full() const
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;T3()&rang; mbed::callback&lang;mbed::UARTSerial, mbed::UARTSerial, void&rang;(T2*, T3(T1::*)())
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::pop(char&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::wait_ms(unsigned)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::rx_irq()
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to mbed::UARTSerial::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[b8]"></a>mbed::UARTSerial::seek(long, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial4seekEli))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to mbed::UARTSerial::seek(long, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[259]"></a>mbed::UARTSerial::wake()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial4wakeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mbed::UARTSerial::wake() &rArr; mbed::Callback&lang;void()&rang;::operator ()() const &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator ()() const
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::dcd_irq()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::rx_irq()
</UL>

<P><STRONG><a name="[b6]"></a>mbed::UARTSerial::close()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial5closeEv))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to mbed::UARTSerial::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[b4]"></a>mbed::UARTSerial::write(const void*, unsigned)</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = mbed::UARTSerial::write(const void*, unsigned) &rArr; mbed::UARTSerial::tx_irq() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::empty() const
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::full() const
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;T3()&rang; mbed::callback&lang;mbed::UARTSerial, mbed::UARTSerial, void&rang;(T2*, T3(T1::*)())
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::push(const char&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::wait_ms(unsigned)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to mbed::UARTSerial::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[b7]"></a>mbed::UARTSerial::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial6isattyEv))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to mbed::UARTSerial::isatty()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[a1]"></a>mbed::UARTSerial::rx_irq()</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial6rx_irqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = mbed::UARTSerial::rx_irq() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::empty() const
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::full() const
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::push(const char&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::wake()
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>mbed::UARTSerial::tx_irq()</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial6tx_irqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = mbed::UARTSerial::tx_irq() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::writeable()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::empty() const
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::full() const
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::pop(char&)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::hup() const
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::wake()
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>mbed::UARTSerial::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[9f]"></a>mbed::UARTSerial::dcd_irq()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial7dcd_irqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed::UARTSerial::dcd_irq() &rArr; mbed::UARTSerial::wake() &rArr; mbed::Callback&lang;void()&rang;::operator ()() const &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::wake()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata)
</UL>
<P><STRONG><a name="[254]"></a>mbed::UARTSerial::wait_ms(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial7wait_msEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::UARTSerial::wait_ms(unsigned) &rArr; rtos::Thread::wait(unsigned) &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
</UL>

<P><STRONG><a name="[b9]"></a>mbed::UARTSerial::api_lock()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerial8api_lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::UARTSerial::api_lock() &rArr; rtos::Mutex::lock(unsigned) &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[25e]"></a>mbed::UARTSerial::UARTSerial(PinName, PinName, int)</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerialC1E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = mbed::UARTSerial::UARTSerial(PinName, PinName, int) &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;T3()&rang; mbed::callback&lang;mbed::UARTSerial, mbed::UARTSerial, void&rang;(T2*, T3(T1::*)())
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::CircularBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::EasyCellularConnection(bool)
</UL>

<P><STRONG><a name="[440]"></a>mbed::UARTSerial::UARTSerial__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerialC1E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[b3]"></a>mbed::UARTSerial::~UARTSerial()</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = mbed::UARTSerial::~UARTSerial() &rArr; mbed::SerialBase::~SerialBase() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::~EasyCellularConnection()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[441]"></a>mbed::UARTSerial::~UARTSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\uartserial.o(i._ZN4mbed10UARTSerialD1Ev), UNUSED)

<P><STRONG><a name="[261]"></a>mbed::bind_to_fd(mbed::FileHandle*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._ZN4mbed10bind_to_fdEPNS_10FileHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = mbed::bind_to_fd(mbed::FileHandle*) &rArr; reserve_filehandle() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[262]"></a>mbed::InterruptIn::read()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\interruptin.o(i._ZN4mbed11InterruptIn4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::InterruptIn::read() &rArr; gpio_read &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::hup() const
</UL>

<P><STRONG><a name="[264]"></a>mbed::QUECTEL_BG96::QUECTEL_BG96(events::EventQueue&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\quectel_bg96.o(i._ZN4mbed12QUECTEL_BG96C1ERN6events10EventQueueE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::QUECTEL_BG96::QUECTEL_BG96(events::EventQueue&)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::AT_CellularDevice(events::EventQueue&)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::CellularConnectionFSM()
</UL>

<P><STRONG><a name="[442]"></a>mbed::QUECTEL_BG96::QUECTEL_BG96__sub_object(events::EventQueue&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\quectel_bg96.o(i._ZN4mbed12QUECTEL_BG96C1ERN6events10EventQueueE), UNUSED)

<P><STRONG><a name="[266]"></a>mbed::transaction_t::transaction_t()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::transaction_t::transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction()
</UL>

<P><STRONG><a name="[443]"></a>mbed::transaction_t::transaction_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tC1Ev), UNUSED)

<P><STRONG><a name="[267]"></a>mbed::transaction_t::~transaction_t()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::transaction_t::~transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()
</UL>

<P><STRONG><a name="[444]"></a>mbed::transaction_t::~transaction_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tD1Ev), UNUSED)

<P><STRONG><a name="[268]"></a>mbed::LowPowerTicker::LowPowerTicker()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\main.o(i._ZN4mbed14LowPowerTickerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbed::LowPowerTicker::LowPowerTicker() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lp_ticker_data
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[445]"></a>mbed::LowPowerTicker::LowPowerTicker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\main.o(i._ZN4mbed14LowPowerTickerC1Ev), UNUSED)

<P><STRONG><a name="[c3]"></a>mbed::LowPowerTicker::~LowPowerTicker__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\main.o(i._ZN4mbed14LowPowerTickerD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbed::LowPowerTicker::~LowPowerTicker__deallocating() &rArr; mbed::LowPowerTicker::~LowPowerTicker() &rArr; mbed::Ticker::~Ticker() &rArr; mbed::Ticker::detach() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::LowPowerTicker::~LowPowerTicker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN4mbed14LowPowerTickerE)
</UL>
<P><STRONG><a name="[5d]"></a>mbed::LowPowerTicker::~LowPowerTicker()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\main.o(i._ZN4mbed14LowPowerTickerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = mbed::LowPowerTicker::~LowPowerTicker() &rArr; mbed::Ticker::~Ticker() &rArr; mbed::Ticker::detach() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::LowPowerTicker::~LowPowerTicker__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___8_main_cpp_led0_n)
<LI> main.o(.constdata__ZTVN4mbed14LowPowerTickerE)
</UL>
<P><STRONG><a name="[446]"></a>mbed::LowPowerTicker::~LowPowerTicker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\main.o(i._ZN4mbed14LowPowerTickerD1Ev), UNUSED)

<P><STRONG><a name="[26b]"></a>mbed::AT_CellularBase::get_at_handler()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\at_cellularbase.o(i._ZN4mbed15AT_CellularBase14get_at_handlerEv))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::close_network()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::close_power()
</UL>

<P><STRONG><a name="[c1]"></a>mbed::AT_CellularDevice::close_power()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDevice11close_powerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbed::AT_CellularDevice::close_power() &rArr; mbed::AT_CellularDevice::release_at_handler(mbed::ATHandler*) &rArr; mbed::ATHandler::~ATHandler() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::release_at_handler(mbed::ATHandler*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularBase::get_at_handler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> at_cellulardevice.o(.constdata__ZTVN4mbed17AT_CellularDeviceE)
<LI> quectel_bg96.o(.constdata__ZTVN4mbed12QUECTEL_BG96E)
</UL>
<P><STRONG><a name="[c0]"></a>mbed::AT_CellularDevice::close_network()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDevice13close_networkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbed::AT_CellularDevice::close_network() &rArr; mbed::AT_CellularDevice::release_at_handler(mbed::ATHandler*) &rArr; mbed::ATHandler::~ATHandler() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::release_at_handler(mbed::ATHandler*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularBase::get_at_handler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> at_cellulardevice.o(.constdata__ZTVN4mbed17AT_CellularDeviceE)
<LI> quectel_bg96.o(.constdata__ZTVN4mbed12QUECTEL_BG96E)
</UL>
<P><STRONG><a name="[c2]"></a>mbed::AT_CellularDevice::modem_debug_on(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDevice14modem_debug_onEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::AT_CellularDevice::modem_debug_on(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::ATHandler::enable_debug(bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> at_cellulardevice.o(.constdata__ZTVN4mbed17AT_CellularDeviceE)
<LI> quectel_bg96.o(.constdata__ZTVN4mbed12QUECTEL_BG96E)
</UL>
<P><STRONG><a name="[26c]"></a>mbed::AT_CellularDevice::release_at_handler(mbed::ATHandler*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDevice18release_at_handlerEPNS_9ATHandlerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbed::AT_CellularDevice::release_at_handler(mbed::ATHandler*) &rArr; mbed::ATHandler::~ATHandler() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::ATHandler::~ATHandler()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::ATHandler::get_ref_count()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::ATHandler::dec_ref_count()
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::close_network()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::close_power()
</UL>

<P><STRONG><a name="[265]"></a>mbed::AT_CellularDevice::AT_CellularDevice(events::EventQueue&)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDeviceC1ERN6events10EventQueueE))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::QUECTEL_BG96::QUECTEL_BG96(events::EventQueue&)
</UL>

<P><STRONG><a name="[447]"></a>mbed::AT_CellularDevice::AT_CellularDevice__sub_object(events::EventQueue&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\at_cellulardevice.o(i._ZN4mbed17AT_CellularDeviceC1ERN6events10EventQueueE), UNUSED)

<P><STRONG><a name="[271]"></a>mbed::remove_filehandle(mbed::FileHandle*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._ZN4mbed17remove_filehandleEPNS_10FileHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>

<P><STRONG><a name="[272]"></a>mbed::FunctionPointerArg1&lang;void, void&rang;::~FunctionPointerArg1()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\main.o(i._ZN4mbed19FunctionPointerArg1IvvED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FunctionPointerArg1&lang;void, void&rang;::~FunctionPointerArg1() &rArr; mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::~PinDetect()
</UL>

<P><STRONG><a name="[448]"></a>mbed::FunctionPointerArg1&lang;void, void&rang;::~FunctionPointerArg1__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\main.o(i._ZN4mbed19FunctionPointerArg1IvvED1Ev), UNUSED)

<P><STRONG><a name="[27b]"></a>mbed::CellularConnectionFSM::get_device()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\cellularconnectionfsm.o(i._ZN4mbed21CellularConnectionFSM10get_deviceEv))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::modem_debug_on(bool)
</UL>

<P><STRONG><a name="[273]"></a>mbed::CellularConnectionFSM::stop()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\cellularconnectionfsm.o(i._ZN4mbed21CellularConnectionFSM4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbed::CellularConnectionFSM::stop() &rArr; rtos::Thread::terminate() &rArr; rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::~CellularConnectionFSM()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::~EasyCellularConnection()
</UL>

<P><STRONG><a name="[275]"></a>mbed::CellularConnectionFSM::CellularConnectionFSM()</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, .\build\cellularconnectionfsm.o(i._ZN4mbed21CellularConnectionFSMC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = mbed::CellularConnectionFSM::CellularConnectionFSM() &rArr; events::EventQueue::EventQueue(unsigned, unsigned char*) &rArr; equeue_create &rArr; equeue_create_inplace &rArr; equeue_tick &rArr; equeue_tick_init() &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::EventQueue(unsigned, unsigned char*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::QUECTEL_BG96::QUECTEL_BG96(events::EventQueue&)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::EasyCellularConnection(bool)
</UL>

<P><STRONG><a name="[449]"></a>mbed::CellularConnectionFSM::CellularConnectionFSM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\cellularconnectionfsm.o(i._ZN4mbed21CellularConnectionFSMC1Ev), UNUSED)

<P><STRONG><a name="[c5]"></a>mbed::CellularConnectionFSM::~CellularConnectionFSM()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\cellularconnectionfsm.o(i._ZN4mbed21CellularConnectionFSMD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbed::CellularConnectionFSM::~CellularConnectionFSM() &rArr; events::EventQueue::~EventQueue() &rArr; equeue_destroy &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;bool(int, int)&rang;::~Callback()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::~EventQueue()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::~EasyCellularConnection()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellularconnectionfsm.o(.constdata__ZTVN4mbed21CellularConnectionFSME)
</UL>
<P><STRONG><a name="[44a]"></a>mbed::CellularConnectionFSM::~CellularConnectionFSM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\cellularconnectionfsm.o(i._ZN4mbed21CellularConnectionFSMD1Ev), UNUSED)

<P><STRONG><a name="[1f0]"></a>mbed::mbed_override_console(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN4mbed21mbed_override_consoleEi))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[27a]"></a>mbed::EasyCellularConnection::modem_debug_on(bool)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\easycellularconnection.o(i._ZN4mbed22EasyCellularConnection14modem_debug_onEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::EasyCellularConnection::modem_debug_on(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::get_device()
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::EasyCellularConnection(bool)
</UL>

<P><STRONG><a name="[27c]"></a>mbed::EasyCellularConnection::EasyCellularConnection(bool)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, .\build\easycellularconnection.o(i._ZN4mbed22EasyCellularConnectionC1Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = mbed::EasyCellularConnection::EasyCellularConnection(bool) &rArr; mbed::CellularConnectionFSM::CellularConnectionFSM() &rArr; events::EventQueue::EventQueue(unsigned, unsigned char*) &rArr; equeue_create &rArr; equeue_create_inplace &rArr; equeue_tick &rArr; equeue_tick_init() &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::CellularConnectionFSM()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::UARTSerial(PinName, PinName, int)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::modem_debug_on(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[44b]"></a>mbed::EasyCellularConnection::EasyCellularConnection__sub_object(bool)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\easycellularconnection.o(i._ZN4mbed22EasyCellularConnectionC1Eb), UNUSED)

<P><STRONG><a name="[5f]"></a>mbed::EasyCellularConnection::~EasyCellularConnection()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, .\build\easycellularconnection.o(i._ZN4mbed22EasyCellularConnectionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = mbed::EasyCellularConnection::~EasyCellularConnection() &rArr; mbed::UARTSerial::~UARTSerial() &rArr; mbed::SerialBase::~SerialBase() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::~CellularConnectionFSM()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::stop()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellularBase::~CellularBase__sub_object()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::~UARTSerial()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easycellularconnection.o(.constdata__ZTVN4mbed22EasyCellularConnectionE)
<LI> main.o(i.__sti___8_main_cpp_led0_n)
</UL>
<P><STRONG><a name="[44c]"></a>mbed::EasyCellularConnection::~EasyCellularConnection__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\easycellularconnection.o(i._ZN4mbed22EasyCellularConnectionD1Ev), UNUSED)

<P><STRONG><a name="[27f]"></a>mbed::mbed_set_unbuffered_stream(std::__FILE*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN4mbed26mbed_set_unbuffered_streamEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::mbed_set_unbuffered_stream(std::__FILE*) &rArr; setbuf &rArr; setvbuf &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[1f1]"></a>mbed::mbed_target_override_console(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN4mbed28mbed_target_override_consoleEi))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[280]"></a>mbed::Timer::read_high_resolution_us()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\timer.o(i._ZN4mbed5Timer23read_high_resolution_usEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbed::Timer::read_high_resolution_us() &rArr; mbed::Timer::slicetime() &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>

<P><STRONG><a name="[203]"></a>mbed::Timer::stop()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5Timer4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::stop() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
</UL>

<P><STRONG><a name="[200]"></a>mbed::Timer::reset()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5Timer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbed::Timer::reset() &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick_update()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
</UL>

<P><STRONG><a name="[201]"></a>mbed::Timer::start()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5Timer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::start() &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick_init()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
</UL>

<P><STRONG><a name="[202]"></a>mbed::Timer::read_ms()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\timer.o(i._ZN4mbed5Timer7read_msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbed::Timer::read_ms() &rArr; mbed::Timer::read_high_resolution_us() &rArr; mbed::Timer::slicetime() &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick_update()
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
</UL>

<P><STRONG><a name="[281]"></a>mbed::Timer::slicetime()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\timer.o(i._ZN4mbed5Timer9slicetimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed::Timer::slicetime() &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
</UL>

<P><STRONG><a name="[215]"></a>mbed::Timer::Timer()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5TimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed::Timer::Timer() &rArr; mbed::Timer::reset() &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_arm_hal_timer_cpp_749a681d
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick_init()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[44d]"></a>mbed::Timer::Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5TimerC1Ev), UNUSED)

<P><STRONG><a name="[57]"></a>mbed::Timer::~Timer()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5TimerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::~Timer() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> arm_hal_timer.o(i.__sti___17_arm_hal_timer_cpp_749a681d)
<LI> main.o(i.__sti___8_main_cpp_led0_n)
</UL>
<P><STRONG><a name="[44e]"></a>mbed::Timer::~Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5TimerD1Ev), UNUSED)

<P><STRONG><a name="[c6]"></a>mbed::Serial::lock()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6Serial4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Serial::lock() &rArr; rtos::Mutex::lock(unsigned) &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to mbed::Serial::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[c8]"></a>mbed::Serial::_getc()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6Serial5_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to mbed::Serial::_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[c9]"></a>mbed::Serial::_putc(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\serial.o(i._ZN4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to mbed::Serial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[c7]"></a>mbed::Serial::unlock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6Serial6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Serial::unlock() &rArr; rtos::Mutex::unlock() &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to mbed::Serial::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[284]"></a>mbed::Serial::Serial(PinName, PinName, const char*, int)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, .\build\serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[44f]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKci), UNUSED)

<P><STRONG><a name="[5c]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::Stream::~Stream__sub_object() &rArr; mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> main.o(i.__sti___8_main_cpp_led0_n)
</UL>
<P><STRONG><a name="[450]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[224]"></a>mbed::Stream::getc()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\stream.o(i._ZN4mbed6Stream4getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_getc(std::__FILE*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Skywire_Rx_interrupt()
</UL>

<P><STRONG><a name="[d5]"></a>mbed::Stream::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[ca]"></a>mbed::Stream::read(void*, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, .\build\stream.o(i._ZN4mbed6Stream4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Stream::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cc]"></a>mbed::Stream::seek(long, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4seekEli))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cf]"></a>mbed::Stream::size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4sizeEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cd]"></a>mbed::Stream::close()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cb]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[ce]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1fe]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, .\build\stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSSI()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMEID()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAPN()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSkywireModel()
</UL>

<P><STRONG><a name="[d6]"></a>mbed::Stream::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[285]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, .\build\stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[451]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[d4]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[28a]"></a>mbed::Ticker::setup(unsigned long long)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, .\build\ticker.o(i._ZN4mbed6Ticker5setupEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed::Ticker::setup(unsigned long long) &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
</UL>

<P><STRONG><a name="[28b]"></a>mbed::Ticker::detach()</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, .\build\ticker.o(i._ZN4mbed6Ticker6detachEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::detach() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::~Timeout()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::handler()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>

<P><STRONG><a name="[c4]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\ticker.o(i._ZN4mbed6Ticker7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ticker.o(.constdata__ZTVN4mbed6TickerE)
<LI> main.o(.constdata__ZTVN4mbed14LowPowerTickerE)
</UL>
<P><STRONG><a name="[20d]"></a>mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, .\build\main.o(i._ZN4mbed6Ticker9attach_usENS_8CallbackIFvvEEEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick_init()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[28c]"></a>mbed::Ticker::Ticker()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\main.o(i._ZN4mbed6TickerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed::Ticker::Ticker() &rArr; mbed::TimerEvent::TimerEvent__sub_object() &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::init(PinName, PinMode)
</UL>

<P><STRONG><a name="[452]"></a>mbed::Ticker::Ticker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\main.o(i._ZN4mbed6TickerC1Ev), UNUSED)

<P><STRONG><a name="[d7]"></a>mbed::Ticker::~Ticker__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\ticker.o(i._ZN4mbed6TickerD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::~Ticker__deallocating() &rArr; mbed::Ticker::~Ticker() &rArr; mbed::Ticker::detach() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[5e]"></a>mbed::Ticker::~Ticker()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\ticker.o(i._ZN4mbed6TickerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::~Ticker() &rArr; mbed::Ticker::detach() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker__deallocating()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::LowPowerTicker::~LowPowerTicker()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ticker.o(.constdata__ZTVN4mbed6TickerE)
<LI> main.o(i.__sti___8_main_cpp_led0_n)
</UL>
<P><STRONG><a name="[453]"></a>mbed::Ticker::~Ticker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\ticker.o(i._ZN4mbed6TickerD1Ev), UNUSED)

<P><STRONG><a name="[288]"></a>mbed::fdopen(mbed::FileHandle*, const char*)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._ZN4mbed6fdopenEPNS_10FileHandleEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unbind_from_fd(int, mbed::FileHandle*)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::bind_to_fd(mbed::FileHandle*)
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[d9]"></a>mbed::Timeout::handler()</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, .\build\timeout.o(i._ZN4mbed7Timeout7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed::Timeout::handler() &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeout.o(.constdata__ZTVN4mbed7TimeoutE)
</UL>
<P><STRONG><a name="[d8]"></a>mbed::Timeout::~Timeout__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\timeout.o(i._ZN4mbed7TimeoutD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbed::Timeout::~Timeout__deallocating() &rArr; mbed::Timeout::~Timeout() &rArr; mbed::Ticker::detach() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::~Timeout()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeout.o(.constdata__ZTVN4mbed7TimeoutE)
</UL>
<P><STRONG><a name="[58]"></a>mbed::Timeout::~Timeout()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\arm_hal_timer.o(i._ZN4mbed7TimeoutD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = mbed::Timeout::~Timeout() &rArr; mbed::Ticker::detach() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::~Timeout__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> arm_hal_timer.o(i.__sti___17_arm_hal_timer_cpp_749a681d)
<LI> timeout.o(.constdata__ZTVN4mbed7TimeoutE)
</UL>
<P><STRONG><a name="[454]"></a>mbed::Timeout::~Timeout__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\arm_hal_timer.o(i._ZN4mbed7TimeoutD1Ev), UNUSED)

<P><STRONG><a name="[28f]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filebase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>

<P><STRONG><a name="[28e]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, .\build\filebase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[287]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::FileBase(const char*, mbed::PathType) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[455]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[da]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filebase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[456]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[457]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[db]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[290]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[291]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath12isFileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[292]"></a>mbed::FilePath::file()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[304]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\filepath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[293]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[305]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filepath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[294]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, .\build\filepath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[458]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\filepath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[26d]"></a>mbed::ATHandler::enable_debug(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\athandler.o(i._ZN4mbed9ATHandler12enable_debugEb))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::modem_debug_on(bool)
</UL>

<P><STRONG><a name="[26e]"></a>mbed::ATHandler::dec_ref_count()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\athandler.o(i._ZN4mbed9ATHandler13dec_ref_countEv))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::release_at_handler(mbed::ATHandler*)
</UL>

<P><STRONG><a name="[26f]"></a>mbed::ATHandler::get_ref_count()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\athandler.o(i._ZN4mbed9ATHandler13get_ref_countEv))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::release_at_handler(mbed::ATHandler*)
</UL>

<P><STRONG><a name="[270]"></a>mbed::ATHandler::~ATHandler()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, .\build\athandler.o(i._ZN4mbed9ATHandlerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbed::ATHandler::~ATHandler() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::release_at_handler(mbed::ATHandler*)
</UL>

<P><STRONG><a name="[459]"></a>mbed::ATHandler::~ATHandler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\athandler.o(i._ZN4mbed9ATHandlerD1Ev), UNUSED)

<P><STRONG><a name="[297]"></a>mbed::DigitalIn::mode(PinMode)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\main.o(i._ZN4mbed9DigitalIn4modeE7PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalIn::mode(PinMode) &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::init(PinName, PinMode)
</UL>

<P><STRONG><a name="[299]"></a>mbed::DigitalIn::DigitalIn(PinName)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\busin.o(i._ZN4mbed9DigitalInC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalIn::DigitalIn(PinName) &rArr; gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::init(PinName, PinMode)
</UL>

<P><STRONG><a name="[45a]"></a>mbed::DigitalIn::DigitalIn__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\busin.o(i._ZN4mbed9DigitalInC1E7PinName), UNUSED)

<P><STRONG><a name="[29b]"></a>mbed::DigitalIn::DigitalIn(PinName, PinMode)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\main.o(i._ZN4mbed9DigitalInC1E7PinName7PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalIn::DigitalIn(PinName, PinMode) &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[45b]"></a>mbed::DigitalIn::DigitalIn__sub_object(PinName, PinMode)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\main.o(i._ZN4mbed9DigitalInC1E7PinName7PinMode), UNUSED)

<P><STRONG><a name="[286]"></a>mbed::mbed_getc(std::__FILE*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN4mbed9mbed_getcEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::mbed_getc(std::__FILE*) &rArr; fgetc &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[29d]"></a>rtos::Mutex::constructor(const char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, .\build\mutex.o(i._ZN4rtos5Mutex11constructorEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
</UL>

<P><STRONG><a name="[222]"></a>rtos::Mutex::lock(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mutex.o(i._ZN4rtos5Mutex4lockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtos::Mutex::lock(unsigned) &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::lock()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::api_lock()
</UL>

<P><STRONG><a name="[223]"></a>rtos::Mutex::unlock()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5Mutex6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::Mutex::unlock() &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::unlock()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::api_unlock()
</UL>

<P><STRONG><a name="[260]"></a>rtos::Mutex::Mutex()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::UARTSerial(PinName, PinName, int)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[45c]"></a>rtos::Mutex::Mutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexC1Ev), UNUSED)

<P><STRONG><a name="[60]"></a>rtos::Mutex::~Mutex()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::Mutex::~Mutex() &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::ATHandler::~ATHandler()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::~UARTSerial()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_led0_n)
</UL>
<P><STRONG><a name="[45d]"></a>rtos::Mutex::~Mutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexD1Ev), UNUSED)

<P><STRONG><a name="[2a0]"></a>rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, .\build\thread.o(i._ZN4rtos6Thread11constructorE12osPriority_tjPhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[25d]"></a>rtos::Thread::wait(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\thread.o(i._ZN4rtos6Thread4waitEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::Thread::wait(unsigned) &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::wait_ms(unsigned)
</UL>

<P><STRONG><a name="[274]"></a>rtos::Thread::terminate()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\thread.o(i._ZN4rtos6Thread9terminateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtos::Thread::terminate() &rArr; rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::stop()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[61]"></a>rtos::Thread::~Thread()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, .\build\thread.o(i._ZN4rtos6ThreadD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rtos::Thread::~Thread() &rArr; rtos::Thread::terminate() &rArr; rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> thread.o(.constdata__ZTVN4rtos6ThreadE)
<LI> main.o(i.__sti___8_main_cpp_led0_n)
</UL>
<P><STRONG><a name="[45e]"></a>rtos::Thread::~Thread__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\thread.o(i._ZN4rtos6ThreadD1Ev), UNUSED)

<P><STRONG><a name="[1d8]"></a>rtos::internal::SysTimer::cancel_tick()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer11cancel_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rtos::internal::SysTimer::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Disable
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[21c]"></a>rtos::internal::SysTimer::update_tick()</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer11update_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rtos::internal::SysTimer::update_tick() &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[1d7]"></a>rtos::internal::SysTimer::schedule_tick(unsigned)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer13schedule_tickEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rtos::internal::SysTimer::schedule_tick(unsigned) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[2a5]"></a>rtos::internal::SysTimer::increment_tick()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer14increment_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtos::internal::SysTimer::increment_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::handler()
</UL>

<P><STRONG><a name="[2a4]"></a>rtos::internal::SysTimer::set_irq_pending()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer15set_irq_pendingEv))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::handler()
</UL>

<P><STRONG><a name="[dc]"></a>rtos::internal::SysTimer::handler()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::internal::SysTimer::handler() &rArr; rtos::internal::SysTimer::increment_tick()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::set_irq_pending()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::increment_tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systimer.o(.constdata__ZTVN4rtos8internal8SysTimerE)
</UL>
<P><STRONG><a name="[1da]"></a>rtos::internal::SysTimer::setup_irq()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer9setup_irqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::internal::SysTimer::setup_irq() &rArr; OS_Tick_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>

<P><STRONG><a name="[1d9]"></a>rtos::internal::SysTimer::SysTimer()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rtos::internal::SysTimer::SysTimer() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lp_ticker_data
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>

<P><STRONG><a name="[45f]"></a>rtos::internal::SysTimer::SysTimer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimerC1Ev), UNUSED)

<P><STRONG><a name="[2a7]"></a>rtos::Semaphore::constructor(int, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, .\build\semaphore.o(i._ZN4rtos9Semaphore11constructorEit))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::constructor(int, unsigned short) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
</UL>

<P><STRONG><a name="[2a2]"></a>rtos::Semaphore::release()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9Semaphore7releaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>

<P><STRONG><a name="[27d]"></a>rtos::Semaphore::Semaphore(int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreC1Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::Semaphore(int) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::EasyCellularConnection(bool)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[460]"></a>rtos::Semaphore::Semaphore__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreC1Ei), UNUSED)

<P><STRONG><a name="[27e]"></a>rtos::Semaphore::~Semaphore()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::Semaphore::~Semaphore() &rArr; osSemaphoreDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::~EasyCellularConnection()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[461]"></a>rtos::Semaphore::~Semaphore__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreD1Ev), UNUSED)

<P><STRONG><a name="[276]"></a>events::EventQueue::EventQueue(unsigned, unsigned char*)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, .\build\eventqueue.o(i._ZN6events10EventQueueC1EjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = events::EventQueue::EventQueue(unsigned, unsigned char*) &rArr; equeue_create &rArr; equeue_create_inplace &rArr; equeue_tick &rArr; equeue_tick_init() &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create_inplace
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::CellularConnectionFSM()
</UL>

<P><STRONG><a name="[462]"></a>events::EventQueue::EventQueue__sub_object(unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\eventqueue.o(i._ZN6events10EventQueueC1EjPh), UNUSED)

<P><STRONG><a name="[278]"></a>events::EventQueue::~EventQueue()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\eventqueue.o(i._ZN6events10EventQueueD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = events::EventQueue::~EventQueue() &rArr; equeue_destroy &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_destroy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::~CellularConnectionFSM()
</UL>

<P><STRONG><a name="[463]"></a>events::EventQueue::~EventQueue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\eventqueue.o(i._ZN6events10EventQueueD1Ev), UNUSED)

<P><STRONG><a name="[2ae]"></a>PinDetect::init(PinName, PinMode)</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, .\build\main.o(i._ZN9PinDetect4initE7PinName7PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = PinDetect::init(PinName, PinMode) &rArr; mbed::DigitalIn::DigitalIn(PinName) &rArr; gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn(PinName)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::mode(PinMode)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::PinDetect(PinName)
</UL>

<P><STRONG><a name="[2af]"></a>PinDetect::PinDetect(PinName)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\main.o(i._ZN9PinDetectC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = PinDetect::PinDetect(PinName) &rArr; PinDetect::init(PinName, PinMode) &rArr; mbed::DigitalIn::DigitalIn(PinName) &rArr; gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointerArg1&lang;void, void&rang;::FunctionPointerArg1(void(*)())
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::init(PinName, PinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[464]"></a>PinDetect::PinDetect__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\main.o(i._ZN9PinDetectC1E7PinName), UNUSED)

<P><STRONG><a name="[5b]"></a>PinDetect::~PinDetect()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, .\build\main.o(i._ZN9PinDetectD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PinDetect::~PinDetect() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointerArg1&lang;void, void&rang;::~FunctionPointerArg1()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_led0_n)
</UL>
<P><STRONG><a name="[465]"></a>PinDetect::~PinDetect__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\main.o(i._ZN9PinDetectD1Ev), UNUSED)

<P><STRONG><a name="[25c]"></a>mbed::UARTSerial::hup() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\uartserial.o(i._ZNK4mbed10UARTSerial3hupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::UARTSerial::hup() const &rArr; mbed::InterruptIn::read() &rArr; gpio_read &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
</UL>

<P><STRONG><a name="[bb]"></a>thunk{-212} to mbed::UARTSerial::read(void*, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\uartserial.o(i._ZThn212_N4mbed10UARTSerial4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = thunk{-212} to mbed::UARTSerial::read(void*, unsigned) &rArr; mbed::UARTSerial::read(void*, unsigned) &rArr; mbed::UARTSerial::rx_irq() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[bd]"></a>thunk{-212} to mbed::UARTSerial::seek(long, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\uartserial.o(i._ZThn212_N4mbed10UARTSerial4seekEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = thunk{-212} to mbed::UARTSerial::seek(long, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::seek(long, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[be]"></a>thunk{-212} to mbed::UARTSerial::close()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, .\build\uartserial.o(i._ZThn212_N4mbed10UARTSerial5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = thunk{-212} to mbed::UARTSerial::close()
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[bc]"></a>thunk{-212} to mbed::UARTSerial::write(const void*, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\uartserial.o(i._ZThn212_N4mbed10UARTSerial5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = thunk{-212} to mbed::UARTSerial::write(const void*, unsigned) &rArr; mbed::UARTSerial::write(const void*, unsigned) &rArr; mbed::UARTSerial::tx_irq() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[bf]"></a>thunk{-212} to mbed::UARTSerial::isatty()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, .\build\uartserial.o(i._ZThn212_N4mbed10UARTSerial6isattyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = thunk{-212} to mbed::UARTSerial::isatty()
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::isatty()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZTVN4mbed10UARTSerialE)
</UL>
<P><STRONG><a name="[d2]"></a>thunk{-212} to mbed::Serial::lock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serial.o(i._ZThn212_N4mbed6Serial4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = thunk{-212} to mbed::Serial::lock() &rArr; mbed::Serial::lock() &rArr; rtos::Mutex::lock(unsigned) &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[d1]"></a>thunk{-212} to mbed::Serial::_getc()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serial.o(i._ZThn212_N4mbed6Serial5_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thunk{-212} to mbed::Serial::_getc() &rArr; mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[d0]"></a>thunk{-212} to mbed::Serial::_putc(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\serial.o(i._ZThn212_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = thunk{-212} to mbed::Serial::_putc(int) &rArr; mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[d3]"></a>thunk{-212} to mbed::Serial::unlock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serial.o(i._ZThn212_N4mbed6Serial6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thunk{-212} to mbed::Serial::unlock() &rArr; mbed::Serial::unlock() &rArr; rtos::Mutex::unlock() &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[296]"></a>operator delete[] (void*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator delete[] (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::ATHandler::~ATHandler()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[26a]"></a>operator delete (void*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::ATHandler::~ATHandler()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AT_CellularDevice::release_at_handler(mbed::ATHandler*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::~Timeout__deallocating()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker__deallocating()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::~PinDetect()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::LowPowerTicker::~LowPowerTicker__deallocating()
</UL>

<P><STRONG><a name="[277]"></a>operator new(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = operator new(unsigned) &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::CellularConnectionFSM()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::init(PinName, PinMode)
</UL>

<P><STRONG><a name="[16d]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(fpclassify.o)(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[208]"></a>__aeabi_atexit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.__aeabi_atexit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_arm_hal_timer_cpp_749a681d
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_ppp_lwip_cpp_b3a13e7c
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ab1f1164
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(aeabi_vec_ctor_nocookie_nodtor.o)(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ab1f1164
</UL>

<P><STRONG><a name="[206]"></a>__cxa_guard_acquire</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = __cxa_guard_acquire &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
</UL>

<P><STRONG><a name="[209]"></a>__cxa_guard_release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.__cxa_guard_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = __cxa_guard_release &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
</UL>

<P><STRONG><a name="[a3]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 7]<UL><LI> at_cellulardevice.o(.constdata__ZTVN4mbed14CellularDeviceE)
<LI> easycellularconnection.o(.constdata__ZTV12CellularBase)
<LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> networkinterface.o(.constdata__ZTV16NetworkInterface)
<LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[f5]"></a>__rt_entry</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, .\build\mbed_boot.o(i.__rt_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; mbed_sdk_init &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_set_stack_heap
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_cpy_nvic
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[130]"></a>__user_perthread_libspace</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, .\build\rtx_lib.o(i.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[2b1]"></a>__user_setup_stackheap</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(i.__user_setup_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __user_setup_stackheap &rArr; _mbed_user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbed_user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[146]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__printf_wp.o)(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2b9]"></a>_mbed_user_setup_stackheap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(i._mbed_user_setup_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _mbed_user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f1]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\rtx_lib.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[15c]"></a>_mutex_initialize</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, .\build\mbed_boot.o(i._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[f2]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtx_lib.o(i._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[2b5]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[150]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _sys_close &rArr; close &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[17d]"></a>_sys_flen</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _sys_flen &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[17e]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _sys_istty &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[159]"></a>_sys_open</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[175]"></a>_sys_read</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, .\build\mbed_retarget.o(i._sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_crlf(int)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[179]"></a>_sys_seek</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _sys_seek &rArr; lseek &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[181]"></a>_sys_write</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _sys_write &rArr; convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_crlf(int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[37a]"></a>_ticker_match_interval_passed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(i._ticker_match_interval_passed))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[2bf]"></a>close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = close &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[3c2]"></a>core_util_are_interrupts_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[3a3]"></a>core_util_atomic_decr_u16</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_atomic_decr_u16))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>

<P><STRONG><a name="[3a0]"></a>core_util_atomic_incr_u16</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_atomic_incr_u16))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
</UL>

<P><STRONG><a name="[219]"></a>core_util_critical_section_enter</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_critical.o(i.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::~Timer()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::empty() const
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::full() const
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::push(const char&)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::pop(char&)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::mode(PinMode)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
</UL>

<P><STRONG><a name="[21e]"></a>core_util_critical_section_exit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\mbed_critical.o(i.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::~Timer()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::empty() const
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::full() const
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::push(const char&)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::pop(char&)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::mode(PinMode)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
</UL>

<P><STRONG><a name="[397]"></a>dma_channel_free</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\dma_api.o(i.dma_channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
</UL>

<P><STRONG><a name="[2ab]"></a>equeue_create</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, .\build\equeue.o(i.equeue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = equeue_create &rArr; equeue_create_inplace &rArr; equeue_tick &rArr; equeue_tick_init() &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create_inplace
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::EventQueue(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[2ac]"></a>equeue_create_inplace</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, .\build\equeue.o(i.equeue_create_inplace))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = equeue_create_inplace &rArr; equeue_tick &rArr; equeue_tick_init() &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_sema_create
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::EventQueue(unsigned, unsigned char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create
</UL>

<P><STRONG><a name="[2ad]"></a>equeue_destroy</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\equeue.o(i.equeue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = equeue_destroy &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_sema_destroy
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_mutex_destroy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::~EventQueue()
</UL>

<P><STRONG><a name="[2ca]"></a>equeue_mutex_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\equeue_mbed.o(i.equeue_mutex_create))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create_inplace
</UL>

<P><STRONG><a name="[2cb]"></a>equeue_mutex_destroy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\equeue_mbed.o(i.equeue_mutex_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_destroy
</UL>

<P><STRONG><a name="[2c9]"></a>equeue_sema_create</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\build\equeue_mbed.o(i.equeue_sema_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = equeue_sema_create &rArr; osEventFlagsNew
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create_inplace
</UL>

<P><STRONG><a name="[2cc]"></a>equeue_sema_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\equeue_mbed.o(i.equeue_sema_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = equeue_sema_destroy &rArr; osEventFlagsDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_destroy
</UL>

<P><STRONG><a name="[2c8]"></a>equeue_tick</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\equeue_mbed.o(i.equeue_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = equeue_tick &rArr; equeue_tick_init() &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_create_inplace
</UL>

<P><STRONG><a name="[289]"></a>error</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, .\build\mbed_error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_location
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[2d0]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + In Cycle
<LI>Call Chain = exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[2d2]"></a>fault_print_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_rtx_fault_handler.o(i.fault_print_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fault_print_init &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>

<P><STRONG><a name="[2d3]"></a>fault_print_str</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, .\build\mbed_rtx_fault_handler.o(i.fault_print_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fault_print_str &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_thread
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
</UL>

<P><STRONG><a name="[28d]"></a>fdopen</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i.fdopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[153]"></a>_fgetc$unlocked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fgetc.o)(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[4c]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[269]"></a>get_lp_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_lp_ticker_api.o(i.get_lp_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::SysTimer()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::LowPowerTicker::LowPowerTicker()
</UL>

<P><STRONG><a name="[253]"></a>get_us_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(i.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[2bc]"></a>gpio_dir</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[2bb]"></a>gpio_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = gpio_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[29a]"></a>gpio_init_in</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn(PinName)
</UL>

<P><STRONG><a name="[29c]"></a>gpio_init_in_ex</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_in_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn(PinName, PinMode)
</UL>

<P><STRONG><a name="[236]"></a>gpio_init_out</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = gpio_init_out &rArr;  gpio_init_out_ex (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[2d9]"></a>gpio_init_out_ex</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_out_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[298]"></a>gpio_mode</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, .\build\gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::mode(PinMode)
</UL>

<P><STRONG><a name="[263]"></a>gpio_read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_read &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::read()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::init(PinName, PinMode)
</UL>

<P><STRONG><a name="[237]"></a>gpio_write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>

<P><STRONG><a name="[2c5]"></a>hal_critical_section_enter</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(i.hal_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_critical_section_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>

<P><STRONG><a name="[2c6]"></a>hal_critical_section_exit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(i.hal_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>

<P><STRONG><a name="[2dd]"></a>hal_deepsleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\sleep.o(i.hal_deepsleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hal_deepsleep &rArr; EMU_EnterEM2 &rArr; emState &rArr; CMU_ClockSelectSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[3a2]"></a>hal_sleep</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\sleep.o(i.hal_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[2d4]"></a>hex_to_str</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, .\build\mbed_rtx_fault_handler.o(i.hex_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hex_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_print_str
</UL>

<P><STRONG><a name="[1f6]"></a>isatty</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.isatty))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_crlf(int)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[4b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(i.isspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>lp_ticker_clear_interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\lp_ticker.o(i.lp_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>lp_ticker_disable_interrupt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\lp_ticker.o(i.lp_ticker_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lp_ticker_disable_interrupt &rArr; rtc_enable_comp0
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_comp0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>lp_ticker_fire_interrupt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\lp_ticker.o(i.lp_ticker_fire_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lp_ticker_fire_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_force_comp0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>lp_ticker_get_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.lp_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>lp_ticker_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\lp_ticker.o(i.lp_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lp_ticker_init &rArr; rtc_init_real &rArr; CMU_ClockEnable &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_comp0_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_real
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>lp_ticker_irq_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_lp_ticker_api.o(i.lp_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lp_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lp_ticker.o(i.lp_ticker_init)
</UL>
<P><STRONG><a name="[91]"></a>lp_ticker_read</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, .\build\lp_ticker.o(i.lp_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lp_ticker_read &rArr; lp_ticker_init &rArr; rtc_init_real &rArr; CMU_ClockEnable &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_full
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>lp_ticker_set_interrupt</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, .\build\lp_ticker.o(i.lp_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lp_ticker_set_interrupt &rArr; lp_ticker_read &rArr; lp_ticker_init &rArr; rtc_init_real &rArr; CMU_ClockEnable &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_comp0_value
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_full
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_read
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[2c2]"></a>lseek</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lseek &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[198]"></a>$Super$$main</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, .\build\main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; PWP_SW_BG96_test() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_DefaultMode_from_RESET()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print(const char*, ...)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSWOForPrint()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23b]"></a>mbed_assert_internal</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator ()() const
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_tx_irq_index
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_rx_irq_index
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::call(int) const
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::handler()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[2d1]"></a>mbed_die</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, .\build\mbed_board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2fe]"></a>mbed_error_printf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\build\mbed_board.o(i.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[2cf]"></a>mbed_error_vfprintf</STRONG> (Thumb, 100 bytes, Stack size 160 bytes, .\build\mbed_board.o(i.mbed_error_vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mbed_error_vfprintf &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[42]"></a>mbed_fault_handler</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, .\build\mbed_rtx_fault_handler.o(i.mbed_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed_fault_handler &rArr; fault_print_init &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_threads_info
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_thread
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_print_str
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_print_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> except.o(.text)
</UL>
<P><STRONG><a name="[197]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_boot.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b4]"></a>mbed_sdk_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\mbed_overrides.o(i.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = mbed_sdk_init &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockSet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockSet
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2b2]"></a>mbed_set_stack_heap</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, .\build\mbed_boot.o(i.mbed_set_stack_heap))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2b6]"></a>mbed_start_main</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.mbed_start_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mbed_start_main &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2c0]"></a>open</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, .\build\mbed_retarget.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[2a1]"></a>osDelay</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, .\build\rtx_delay.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
</UL>

<P><STRONG><a name="[2ce]"></a>osEventFlagsDelete</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\rtx_evflags.o(i.osEventFlagsDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osEventFlagsDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_sema_destroy
</UL>

<P><STRONG><a name="[2cd]"></a>osEventFlagsNew</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, .\build\rtx_evflags.o(i.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osEventFlagsNew
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsNew
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_sema_create
</UL>

<P><STRONG><a name="[30e]"></a>osKernelGetState</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[2be]"></a>osKernelInitialize</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[303]"></a>osKernelStart</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osKernelStart &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
</UL>

<P><STRONG><a name="[317]"></a>osMessageQueueGet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[31c]"></a>osMessageQueueNew</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, .\build\rtx_msgqueue.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osMessageQueueNew
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[31e]"></a>osMessageQueuePut</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1fb]"></a>osMutexAcquire</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[29f]"></a>osMutexDelete</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(i.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
</UL>

<P><STRONG><a name="[29e]"></a>osMutexNew</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
</UL>

<P><STRONG><a name="[218]"></a>osMutexRelease</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[2b8]"></a>osRtxErrorNotify</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(i.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[86]"></a>osRtxEventFlagsPostProcess</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\build\rtx_evflags.o(i.osRtxEventFlagsPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxEventFlagsPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.svcRtxEventFlagsNew)
</UL>
<P><STRONG><a name="[87]"></a>osRtxIdleThread</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(i.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_idle_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[32d]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, .\build\rtx_memory.o(i.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[32f]"></a>osRtxMemoryFree</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, .\build\rtx_memory.o(i.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[331]"></a>osRtxMemoryInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, .\build\rtx_memory.o(i.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[2e9]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32_lt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[336]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[339]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[89]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[33f]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[12c]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, .\build\rtx_system.o(i.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[2e6]"></a>osRtxPostProcess</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\rtx_system.o(i.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[8a]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[352]"></a>osRtxThreadBlock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[35c]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[35d]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[344]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDelayCompleted
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
</UL>

<P><STRONG><a name="[342]"></a>osRtxThreadDispatch</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[33c]"></a>osRtxThreadListGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[356]"></a>osRtxThreadListPut</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, .\build\rtx_thread.o(i.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[329]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[347]"></a>osRtxThreadListRoot</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadListRoot))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[355]"></a>osRtxThreadListSort</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[8c]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[34f]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[33d]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[358]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[353]"></a>osRtxThreadSwitch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitch
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[35a]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[32a]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[12d]"></a>osRtxTick_Handler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, .\build\rtx_system.o(i.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = osRtxTick_Handler &rArr; OS_Tick_AcknowledgeIRQ &rArr; rtos::internal::SysTimer::schedule_tick(unsigned) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[88]"></a>osRtxTimerThread</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\rtx_timer.o(i.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[71]"></a>osRtxTimerTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\rtx_timer.o(i.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osRtxTimerThread)
</UL>
<P><STRONG><a name="[2aa]"></a>osSemaphoreDelete</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
</UL>

<P><STRONG><a name="[2a8]"></a>osSemaphoreNew</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, .\build\rtx_semaphore.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>

<P><STRONG><a name="[2a9]"></a>osSemaphoreRelease</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
</UL>

<P><STRONG><a name="[369]"></a>osThreadContextNew</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, .\build\rtx_thread.o(i.osThreadContextNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osThreadContextNew
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[8b]"></a>osThreadExit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadExit &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[1b9]"></a>osThreadGetId</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[328]"></a>osThreadGetName</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetName
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[302]"></a>osThreadNew</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osThreadNew &rArr; osThreadContextNew
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
</UL>

<P><STRONG><a name="[2a3]"></a>osThreadTerminate</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osThreadTerminate &rArr; EvrRtxThreadTerminate &rArr; thread_terminate_hook
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>

<P><STRONG><a name="[370]"></a>pin_location</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\pinmap_function.o(i.pin_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pin_location &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_get_function_field
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
</UL>

<P><STRONG><a name="[2da]"></a>pin_mode</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, .\build\pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable_pins
</UL>

<P><STRONG><a name="[374]"></a>pinmap_find_peripheral</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(i.pinmap_find_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[371]"></a>pinmap_get_function_field</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\pinmap_function.o(i.pinmap_get_function_field))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_location
</UL>

<P><STRONG><a name="[372]"></a>pinmap_merge</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pinmap_merge &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
</UL>

<P><STRONG><a name="[373]"></a>pinmap_peripheral</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pinmap_peripheral &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
</UL>

<P><STRONG><a name="[63]"></a>pre_main</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, .\build\mbed_boot.o(i.pre_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = pre_main &rArr; main &rArr; $Super$$main &rArr; PWP_SW_BG96_test() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_boot.o(i.mbed_start_main)
</UL>
<P><STRONG><a name="[2ff]"></a>print_context_info</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, .\build\mbed_rtx_fault_handler.o(i.print_context_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = print_context_info &rArr; fault_print_str &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_print_str
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>

<P><STRONG><a name="[300]"></a>print_thread</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, .\build\mbed_rtx_fault_handler.o(i.print_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = print_thread &rArr; fault_print_str &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_print_str
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_threads_info
</UL>

<P><STRONG><a name="[301]"></a>print_threads_info</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_rtx_fault_handler.o(i.print_threads_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = print_threads_info &rArr; print_thread &rArr; fault_print_str &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>

<P><STRONG><a name="[2c1]"></a>read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i.read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[2f7]"></a>rtc_enable_comp0</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\rtc_api.o(i.rtc_enable_comp0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_enable_comp0
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FreezeEnable
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_comp0_value
</UL>

<P><STRONG><a name="[2f8]"></a>rtc_force_comp0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtc_api.o(i.rtc_force_comp0))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_fire_interrupt
</UL>

<P><STRONG><a name="[2fb]"></a>rtc_get_full</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\rtc_api.o(i.rtc_get_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_get_full
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_read
</UL>

<P><STRONG><a name="[2f9]"></a>rtc_init_real</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, .\build\rtc_api.o(i.rtc_init_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rtc_init_real &rArr; CMU_ClockEnable &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[2fa]"></a>rtc_set_comp0_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtc_api.o(i.rtc_set_comp0_handler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[2fc]"></a>rtc_set_comp0_value</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\rtc_api.o(i.rtc_set_comp0_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc_set_comp0_value &rArr; rtc_enable_comp0
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FreezeEnable
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CompareSet
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_comp0
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
</UL>

<P><STRONG><a name="[32c]"></a>rtos_idle_loop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(i.rtos_idle_loop))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>

<P><STRONG><a name="[234]"></a>serial_baud</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[231]"></a>serial_getc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Rx
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::read(void*, unsigned)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>

<P><STRONG><a name="[233]"></a>serial_init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, .\build\serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_route
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_clock
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable_pins
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_print_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[24a]"></a>serial_irq_handler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial_irq_handler &rArr; serial_get_index
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[23c]"></a>serial_irq_handler_asynch</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = serial_irq_handler_asynch &rArr; serial_rx_irq_handler_asynch &rArr; serial_rx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StatusGet
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntGetEnabled
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_StatusGet
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntGetEnabled
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[242]"></a>serial_irq_set</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, .\build\serial_api.o(i.serial_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_tx_irq_index
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_rx_irq_index
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[385]"></a>serial_preinit</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, .\build\serial_api.o(i.serial_preinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = serial_preinit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_location
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[232]"></a>serial_putc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_print_str
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::write(const void*, unsigned)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>

<P><STRONG><a name="[243]"></a>serial_readable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_readable))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>

<P><STRONG><a name="[38c]"></a>serial_rx_irq_handler_asynch</STRONG> (Thumb, 648 bytes, Stack size 24 bytes, .\build\serial_api.o(i.serial_rx_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = serial_rx_irq_handler_asynch &rArr; serial_rx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StatusGet
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxDataGet
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntGetEnabled
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_StatusGet
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_RxDataGet
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntGetEnabled
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[38e]"></a>serial_tx_irq_handler_asynch</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_tx_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = serial_tx_irq_handler_asynch &rArr; serial_tx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Tx
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StatusGet
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntEnable
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntDisable
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_StatusGet
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntEnable
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[245]"></a>serial_writable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::writeable()
</UL>

<P><STRONG><a name="[3a1]"></a>sleep_manager_can_deep_sleep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_can_deep_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[240]"></a>sleep_manager_lock_deep_sleep_internal</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_lock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
</UL>

<P><STRONG><a name="[21b]"></a>sleep_manager_sleep_auto</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_sleep_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sleep_manager_sleep_auto &rArr; hal_deepsleep &rArr; EMU_EnterEM2 &rArr; emState &rArr; CMU_ClockSelectSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_can_deep_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[23f]"></a>sleep_manager_unlock_deep_sleep_internal</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_unlock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::~Timer()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_unblock_sleep
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
</UL>

<P><STRONG><a name="[64]"></a>svcRtxDelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\rtx_delay.o(i.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(i.osDelay)
</UL>
<P><STRONG><a name="[65]"></a>svcRtxEventFlagsDelete</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, .\build\rtx_evflags.o(i.svcRtxEventFlagsDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxEventFlagsDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsDelete)
</UL>
<P><STRONG><a name="[66]"></a>svcRtxEventFlagsNew</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, .\build\rtx_evflags.o(i.svcRtxEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxEventFlagsNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsNew)
</UL>
<P><STRONG><a name="[67]"></a>svcRtxKernelGetState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetState)
</UL>
<P><STRONG><a name="[68]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 660 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitializeCompleted
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[21d]"></a>svcRtxKernelResume</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, .\build\rtx_kernel.o(i.svcRtxKernelResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = svcRtxKernelResume &rArr; KernelUnblock &rArr; OS_Tick_Enable &rArr; rtos::internal::SysTimer::SysTimer() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelUnblock
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelResumed
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[69]"></a>svcRtxKernelStart</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = svcRtxKernelStart &rArr; OS_Tick_Enable &rArr; rtos::internal::SysTimer::SysTimer() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[21a]"></a>svcRtxKernelSuspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(i.svcRtxKernelSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxKernelSuspend &rArr; KernelBlock &rArr; OS_Tick_Disable &rArr; rtos::internal::SysTimer::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelBlock
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelSuspended
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[6a]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueGet)
</UL>
<P><STRONG><a name="[6b]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueNew)
</UL>
<P><STRONG><a name="[6c]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueuePut)
</UL>
<P><STRONG><a name="[6d]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexAcquire)
</UL>
<P><STRONG><a name="[6e]"></a>svcRtxMutexDelete</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[6f]"></a>svcRtxMutexNew</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexNew)
</UL>
<P><STRONG><a name="[70]"></a>svcRtxMutexRelease</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, .\build\rtx_mutex.o(i.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[72]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[73]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreNew)
</UL>
<P><STRONG><a name="[74]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[76]"></a>svcRtxThreadExit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[77]"></a>svcRtxThreadGetId</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[78]"></a>svcRtxThreadGetName</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.svcRtxThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxThreadGetName
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetName)
</UL>
<P><STRONG><a name="[75]"></a>svcRtxThreadNew</STRONG> (Thumb, 632 bytes, Stack size 64 bytes, .\build\rtx_thread.o(i.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadContextNew)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadTerminate)
</UL>
<P><STRONG><a name="[1ba]"></a>thread_terminate_hook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\thread.o(i.thread_terminate_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
</UL>

<P><STRONG><a name="[24e]"></a>ticker_insert_event_us</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, .\build\mbed_ticker_api.o(i.ticker_insert_event_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>

<P><STRONG><a name="[e]"></a>ticker_irq_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mbed_lp_ticker_api.o(.data)
<LI> mbed_us_ticker_api.o(.data)
</UL>
<P><STRONG><a name="[3b9]"></a>ticker_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(i.ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[282]"></a>ticker_read_us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(i.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::SysTimer()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::update_tick()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
</UL>

<P><STRONG><a name="[250]"></a>ticker_remove_event</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[252]"></a>ticker_set_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*)
</UL>

<P><STRONG><a name="[9a]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\us_ticker.o(i.us_ticker_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_clear_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\us_ticker.o(i.us_ticker_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_disable_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>us_ticker_fire_interrupt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_fire_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>us_ticker_get_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.us_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>us_ticker_init</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, .\build\us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = us_ticker_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitCC
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[3bf]"></a>us_ticker_irq_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler_internal
</UL>

<P><STRONG><a name="[8d]"></a>us_ticker_irq_handler_internal</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, .\build\us_ticker.o(i.us_ticker_irq_handler_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = us_ticker_irq_handler_internal &rArr; us_ticker_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntGet
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(i.us_ticker_init)
</UL>
<P><STRONG><a name="[98]"></a>us_ticker_read</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = us_ticker_read &rArr; us_ticker_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, .\build\us_ticker.o(i.us_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = us_ticker_set_interrupt &rArr; us_ticker_read &rArr; us_ticker_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntEnable
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntDisable
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntClear
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CompareSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[1ec]"></a>wait</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\mbed_wait_api_rtos.o(i.wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = wait &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResponse(const char*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_print(int)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink_leds(int)
</UL>

<P><STRONG><a name="[20f]"></a>wait_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_wait_api_rtos.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[3c1]"></a>wait_us</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\build\mbed_wait_api_rtos.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>

<P><STRONG><a name="[2c3]"></a>write</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[45]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_numeric_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[3c3]"></a>SingletonPtr&lang;rtos::Mutex&rang;::get()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(t._ZN12SingletonPtrIN4rtos5MutexEE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>

<P><STRONG><a name="[221]"></a>SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\fatfilesystem.o(t._ZN12SingletonPtrIN4rtos5MutexEEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
</UL>

<P><STRONG><a name="[59]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::Transaction() &rArr; mbed::transaction_t::transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i.__sti___7_SPI_cpp_ab1f1164)
</UL>
<P><STRONG><a name="[466]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev), UNUSED)

<P><STRONG><a name="[8e]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::~Transaction() &rArr; mbed::transaction_t::~transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::~transaction_t()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj4EjED1Ev)
</UL>
<P><STRONG><a name="[467]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev), UNUSED)

<P><STRONG><a name="[5a]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)4, unsigned&rang;::~CircularBuffer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj4EjED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)4, unsigned&rang;::~CircularBuffer() &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i.__sti___7_SPI_cpp_ab1f1164)
</UL>
<P><STRONG><a name="[468]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)4, unsigned&rang;::~CircularBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj4EjED1Ev), UNUSED)

<P><STRONG><a name="[256]"></a>mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::pop(char&)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\uartserial.o(t._ZN4mbed14CircularBufferIcLj256EjE3popERc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::pop(char&) &rArr; mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::empty() const &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
</UL>

<P><STRONG><a name="[25b]"></a>mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::push(const char&)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, .\build\uartserial.o(t._ZN4mbed14CircularBufferIcLj256EjE4pushERKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::push(const char&) &rArr; mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::full() const &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::full() const
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::rx_irq()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
</UL>

<P><STRONG><a name="[25f]"></a>mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::CircularBuffer()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\uartserial.o(t._ZN4mbed14CircularBufferIcLj256EjEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::UARTSerial(PinName, PinName, int)
</UL>

<P><STRONG><a name="[469]"></a>mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::CircularBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\uartserial.o(t._ZN4mbed14CircularBufferIcLj256EjEC1Ev), UNUSED)

<P><STRONG><a name="[2b0]"></a>mbed::FunctionPointerArg1&lang;void, void&rang;::FunctionPointerArg1(void(*)())</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\main.o(t._ZN4mbed19FunctionPointerArg1IvvEC1EPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::FunctionPointerArg1&lang;void, void&rang;::FunctionPointerArg1(void(*)()) &rArr; mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::PinDetect(PinName)
</UL>

<P><STRONG><a name="[46a]"></a>mbed::FunctionPointerArg1&lang;void, void&rang;::FunctionPointerArg1__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\main.o(t._ZN4mbed19FunctionPointerArg1IvvEC1EPFvvE), UNUSED)

<P><STRONG><a name="[dd]"></a>bool mbed::Callback&lang;bool(int, int)&rang;::function_call&lang;bool(*)(int, int)&rang;(const void*, int, int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\cellularconnectionfsm.o(t._ZN4mbed8CallbackIFbiiEE13function_callIPS1_EEbPKvii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bool mbed::Callback&lang;bool(int, int)&rang;::function_call&lang;bool(*)(int, int)&rang;(const void*, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellularconnectionfsm.o(.constdata__ZZN4mbed8CallbackIFbiiEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[df]"></a>void mbed::Callback&lang;bool(int, int)&rang;::function_dtor&lang;bool(*)(int, int)&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\cellularconnectionfsm.o(t._ZN4mbed8CallbackIFbiiEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> cellularconnectionfsm.o(.constdata__ZZN4mbed8CallbackIFbiiEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[de]"></a>void mbed::Callback&lang;bool(int, int)&rang;::function_move&lang;bool(*)(int, int)&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\cellularconnectionfsm.o(t._ZN4mbed8CallbackIFbiiEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> cellularconnectionfsm.o(.constdata__ZZN4mbed8CallbackIFbiiEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[279]"></a>mbed::Callback&lang;bool(int, int)&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\cellularconnectionfsm.o(t._ZN4mbed8CallbackIFbiiEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;bool(int, int)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CellularConnectionFSM::~CellularConnectionFSM()
</UL>

<P><STRONG><a name="[46b]"></a>mbed::Callback&lang;bool(int, int)&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\cellularconnectionfsm.o(t._ZN4mbed8CallbackIFbiiEED1Ev), UNUSED)

<P><STRONG><a name="[e0]"></a>void mbed::Callback&lang;void(nsapi_event, int)&rang;::function_call&lang;void(*)(nsapi_event, int)&rang;(const void*, nsapi_event, int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFv11nsapi_eventiEE13function_callIPS2_EEvPKvS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void mbed::Callback&lang;void(nsapi_event, int)&rang;::function_call&lang;void(*)(nsapi_event, int)&rang;(const void*, nsapi_event, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cellularnetwork.o(.constdata__ZZN4mbed8CallbackIFv11nsapi_eventiEE8generateIPS2_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e2]"></a>void mbed::Callback&lang;void(nsapi_event, int)&rang;::function_dtor&lang;void(*)(nsapi_event, int)&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFv11nsapi_eventiEE13function_dtorIPS2_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> at_cellularnetwork.o(.constdata__ZZN4mbed8CallbackIFv11nsapi_eventiEE8generateIPS2_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e1]"></a>void mbed::Callback&lang;void(nsapi_event, int)&rang;::function_move&lang;void(*)(nsapi_event, int)&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFv11nsapi_eventiEE13function_moveIPS2_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> at_cellularnetwork.o(.constdata__ZZN4mbed8CallbackIFv11nsapi_eventiEE8generateIPS2_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[56]"></a>mbed::Callback&lang;void(nsapi_event, int)&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFv11nsapi_eventiEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(nsapi_event, int)&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ppp_lwip.o(i.__sti___12_ppp_lwip_cpp_b3a13e7c)
</UL>
<P><STRONG><a name="[46c]"></a>mbed::Callback&lang;void(nsapi_event, int)&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFv11nsapi_eventiEED1Ev), UNUSED)

<P><STRONG><a name="[e3]"></a>void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e5]"></a>void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e4]"></a>void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[248]"></a>mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEEC1EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t()
</UL>

<P><STRONG><a name="[46d]"></a>mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEEC1EPS1_), UNUSED)

<P><STRONG><a name="[24c]"></a>mbed::Callback&lang;void(int)&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events::EventQueue::~EventQueue()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::~transaction_t()
</UL>

<P><STRONG><a name="[46e]"></a>mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEED1Ev), UNUSED)

<P><STRONG><a name="[e6]"></a>void mbed::Callback&lang;void()&rang;::function_call&lang;mbed::Callback&lang;void()&rang;::method_context&lang;mbed::UARTSerial, void(mbed::UARTSerial::*)()&rang;&rang;(const void*)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\uartserial.o(t._ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = void mbed::Callback&lang;void()&rang;::function_call&lang;mbed::Callback&lang;void()&rang;::method_context&lang;mbed::UARTSerial, void(mbed::UARTSerial::*)()&rang;&rang;(const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e9]"></a>void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e8]"></a>void mbed::Callback&lang;void()&rang;::function_dtor&lang;mbed::Callback&lang;void()&rang;::method_context&lang;mbed::UARTSerial, void(mbed::UARTSerial::*)()&rang;&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\uartserial.o(t._ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvPv))
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvRKT_E3ops)
</UL>
<P><STRONG><a name="[eb]"></a>void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e7]"></a>void mbed::Callback&lang;void()&rang;::function_move&lang;mbed::Callback&lang;void()&rang;::method_context&lang;mbed::UARTSerial, void(mbed::UARTSerial::*)()&rang;&rang;(void*, const void*)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, .\build\uartserial.o(t._ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvPvPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void mbed::Callback&lang;void()&rang;::function_move&lang;mbed::Callback&lang;void()&rang;::method_context&lang;mbed::UARTSerial, void(mbed::UARTSerial::*)()&rang;&rang;(void*, const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartserial.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextINS_10UARTSerialEMS5_FvvEEEEEvRKT_E3ops)
</UL>
<P><STRONG><a name="[ea]"></a>void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[199]"></a>mbed::Callback&lang;void()&rang;::Callback(void(*)())</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_arm_hal_timer_cpp_749a681d
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::UARTSerial(PinName, PinName, int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick_init()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func4&rang;
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led0_n
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::rx_irq()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointerArg1&lang;void, void&rang;::FunctionPointerArg1(void(*)())
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::LowPowerTicker::LowPowerTicker()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[46f]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_), UNUSED)

<P><STRONG><a name="[20c]"></a>mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\athandler.o(t._ZN4mbed8CallbackIFvvEEC1ERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[470]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\athandler.o(t._ZN4mbed8CallbackIFvvEEC1ERKS2_), UNUSED)

<P><STRONG><a name="[3c4]"></a>mbed::Callback&lang;void()&rang;::Callback&lang;mbed::UARTSerial, mbed::UARTSerial&rang;(T2*, void(T1::*)())</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, .\build\uartserial.o(t._ZN4mbed8CallbackIFvvEEC1INS_10UARTSerialES4_EEPT0_MT_FvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback&lang;mbed::UARTSerial, mbed::UARTSerial&rang;(T2*, void(T1::*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;T3()&rang; mbed::callback&lang;mbed::UARTSerial, mbed::UARTSerial, void&rang;(T2*, T3(T1::*)())
</UL>

<P><STRONG><a name="[471]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object&lang;mbed::UARTSerial, mbed::UARTSerial&rang;(T2*, void(T1::*)())</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, .\build\uartserial.o(t._ZN4mbed8CallbackIFvvEEC1INS_10UARTSerialES4_EEPT0_MT_FvvE), UNUSED)

<P><STRONG><a name="[54]"></a>mbed::Callback&lang;void()&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::ATHandler::~ATHandler()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::~Timeout()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::~UARTSerial()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::UARTSerial(PinName, PinName, int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick_init()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::handler()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::rx_irq()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointerArg1&lang;void, void&rang;::~FunctionPointerArg1()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseD1Ev)
</UL>
<P><STRONG><a name="[472]"></a>mbed::Callback&lang;void()&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEED1Ev), UNUSED)

<P><STRONG><a name="[241]"></a>mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\loramac.o(t._ZN4mbed8CallbackIFvvEEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&) &rArr; mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[258]"></a>mbed::Callback&lang;T3()&rang; mbed::callback&lang;mbed::UARTSerial, mbed::UARTSerial, void&rang;(T2*, T3(T1::*)())</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, .\build\uartserial.o(t._ZN4mbed8callbackINS_10UARTSerialES1_vEENS_8CallbackIFT1_vEEEPT0_MT_FS3_vE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbed::Callback&lang;T3()&rang; mbed::callback&lang;mbed::UARTSerial, mbed::UARTSerial, void&rang;(T2*, T3(T1::*)()) &rArr; mbed::Callback&lang;void()&rang;::Callback&lang;mbed::UARTSerial, mbed::UARTSerial&rang;(T2*, void(T1::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback&lang;mbed::UARTSerial, mbed::UARTSerial&rang;(T2*, void(T1::*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::UARTSerial(PinName, PinName, int)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
</UL>

<P><STRONG><a name="[8f]"></a>CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE4initEPS1_MS1_FvPvES4_)
</UL>
<P><STRONG><a name="[247]"></a>CThunk&lang;mbed::SerialBase&rang;::init(mbed::SerialBase*, void(mbed::SerialBase::*)(void*), void*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE4initEPS1_MS1_FvPvES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CThunk&lang;mbed::SerialBase&rang;::init(mbed::SerialBase*, void(mbed::SerialBase::*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[257]"></a>mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::full() const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\uartserial.o(t._ZNK4mbed14CircularBufferIcLj256EjE4fullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::full() const &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::push(const char&)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::rx_irq()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
</UL>

<P><STRONG><a name="[255]"></a>mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::empty() const</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\uartserial.o(t._ZNK4mbed14CircularBufferIcLj256EjE5emptyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::empty() const &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;char, (unsigned)256, unsigned&rang;::pop(char&)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::tx_irq()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::rx_irq()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::write(const void*, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::read(void*, unsigned)
</UL>

<P><STRONG><a name="[23e]"></a>mbed::Callback&lang;void(int)&rang;::call(int) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\serialbase.o(t._ZNK4mbed8CallbackIFviEE4callEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::call(int) const &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[23d]"></a>mbed::Callback&lang;void(int)&rang;::operator bool() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\serialbase.o(t._ZNK4mbed8CallbackIFviEEcvbEv))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[25a]"></a>mbed::Callback&lang;void()&rang;::operator ()() const</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\at_cellularsms.o(t._ZNK4mbed8CallbackIFvvEEclEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbed::Callback&lang;void()&rang;::operator ()() const &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::wake()
</UL>

<P><STRONG><a name="[23a]"></a>mbed::Callback&lang;void()&rang;::operator bool() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\at_cellularsms.o(t._ZNK4mbed8CallbackIFvvEEcvbEv))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::UARTSerial::wake()
</UL>

<P><STRONG><a name="[3c6]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fnaninf.o)(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_f
</UL>

<P><STRONG><a name="[11a]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[473]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[474]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[20b]"></a>__aeabi_f2ulz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(ffixull.o)(x$fpl$llufromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWP_SW_BG96_test()
</UL>

<P><STRONG><a name="[3c5]"></a>_ll_ufrom_f</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(ffixull.o)(x$fpl$llufromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[fc]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(printf1.o)(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[100]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(printf2.o)(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ec]"></a>__sti___17_arm_hal_timer_cpp_749a681d</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\arm_hal_timer.o(i.__sti___17_arm_hal_timer_cpp_749a681d))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __sti___17_arm_hal_timer_cpp_749a681d &rArr; mbed::Timer::Timer() &rArr; mbed::Timer::reset() &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_timer.o(.init_array)
</UL>
<P><STRONG><a name="[1ac]"></a>BUS_RegBitRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\em_cmu.o(i.BUS_RegBitRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHfLeConfig
</UL>

<P><STRONG><a name="[1a4]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, .\build\em_cmu.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHfLeConfig
</UL>

<P><STRONG><a name="[19e]"></a>CMU_DivToLog2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.CMU_DivToLog2))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[1a7]"></a>auxClkGet</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.auxClkGet))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[1a6]"></a>dbgClkGet</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.dbgClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbgClkGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[1ad]"></a>flashWaitStateControl</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.flashWaitStateControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_UpdateWaitStates
</UL>

<P><STRONG><a name="[19b]"></a>flashWaitStateMax</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\em_cmu.o(i.flashWaitStateMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flashWaitStateMax &rArr; flashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateControl
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemMaxCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>

<P><STRONG><a name="[2d8]"></a>getHfLeConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\em_cmu.o(i.getHfLeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[1a5]"></a>lfClkGet</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, .\build\em_cmu.o(i.lfClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHfLeConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemULFRCOClockGet
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockGet
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFRCOClockGet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[1a0]"></a>setHfLeConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.setHfLeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setHfLeConfig &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>

<P><STRONG><a name="[1a1]"></a>syncReg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.syncReg))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>

<P><STRONG><a name="[1a8]"></a>usbCClkGet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.usbCClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbCClkGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockGet
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFRCOClockGet
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[1af]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\em_core.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_EnterCritical
</UL>

<P><STRONG><a name="[1b1]"></a>emState</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, .\build\em_emu.o(i.emState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = emState &rArr; CMU_ClockSelectSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
</UL>

<P><STRONG><a name="[1b2]"></a>getErrataFixEmuE107En</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\build\em_emu.o(i.getErrataFixEmuE107En))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
</UL>

<P><STRONG><a name="[1b3]"></a>ramWFI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\em_emu.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
</UL>

<P><STRONG><a name="[1c2]"></a>GPIO_PinOutClear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\em_gpio.o(i.GPIO_PinOutClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>

<P><STRONG><a name="[1c1]"></a>GPIO_PinOutSet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\em_gpio.o(i.GPIO_PinOutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinOutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>

<P><STRONG><a name="[1ca]"></a>LEUART_Sync</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\em_leuart.o(i.LEUART_Sync))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_TxDmaInEM2Enable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_RxDmaInEM2Enable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Enable
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
</UL>

<P><STRONG><a name="[1e3]"></a>TIMER_Valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\em_timer.o(i.TIMER_Valid))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitCC
</UL>

<P><STRONG><a name="[214]"></a>equeue_tick_init()</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, .\build\equeue_mbed.o(i._Z16equeue_tick_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = equeue_tick_init() &rArr; mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(mbed::Callback&lang;void()&rang;, unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equeue_tick
</UL>

<P><STRONG><a name="[51]"></a>equeue_tick_update()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\equeue_mbed.o(i._Z18equeue_tick_updatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = equeue_tick_update() &rArr; mbed::Timer::read_ms() &rArr; mbed::Timer::read_high_resolution_us() &rArr; mbed::Timer::slicetime() &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> equeue_mbed.o(i._Z16equeue_tick_initv)
</UL>
<P><STRONG><a name="[2db]"></a>BUS_RegBitRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\gpio_api.o(i.BUS_RegBitRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read
</UL>

<P><STRONG><a name="[1bc]"></a>GPIOINT_IRQDispatcher</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\gpio_irq_api.o(i.GPIOINT_IRQDispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOINT_IRQDispatcher &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
</UL>

<P><STRONG><a name="[1bf]"></a>GPIO_IntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(i.GPIO_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>

<P><STRONG><a name="[1be]"></a>GPIO_IntGetEnabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(i.GPIO_IntGetEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>handle_interrupt_in</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, .\build\gpio_irq_api.o(i.handle_interrupt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOINT_IRQDispatcher
</UL>

<P><STRONG><a name="[2b3]"></a>mbed_cpy_nvic</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\mbed_boot.o(i.mbed_cpy_nvic))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2dc]"></a>are_interrupts_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_critical_section_api.o(i.are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>

<P><STRONG><a name="[2ba]"></a>_gpio_init_in</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i._gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = _gpio_init_in &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>

<P><STRONG><a name="[2bd]"></a>_gpio_init_out</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\mbed_gpio.o(i._gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[1ef]"></a>get_console(int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z11get_consolei))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_target_override_console(int)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_override_console(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
</UL>

<P><STRONG><a name="[1f5]"></a>convert_crlf(int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z12convert_crlfi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = convert_crlf(int) &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[1fa]"></a>singleton_lock()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z14singleton_lockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = singleton_lock() &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
</UL>

<P><STRONG><a name="[1fc]"></a>unbind_from_fd(int, mbed::FileHandle*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z14unbind_from_fdiPN4mbed10FileHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = unbind_from_fd(int, mbed::FileHandle*) &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[1f2]"></a>default_console()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z15default_consolev))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[217]"></a>singleton_unlock()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z16singleton_unlockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = singleton_unlock() &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
</UL>

<P><STRONG><a name="[21f]"></a>handle_open_errors(int, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z18handle_open_errorsij))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = handle_open_errors(int, unsigned) &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[220]"></a>reserve_filehandle()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z18reserve_filehandlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = reserve_filehandle() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::bind_to_fd(mbed::FileHandle*)
</UL>

<P><STRONG><a name="[230]"></a>get_fhc(int)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z7get_fhci))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[f]"></a>default_idle_hook()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\mbed_rtx_idle.o(i._Z17default_idle_hookv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = default_idle_hook() &rArr; svcRtxKernelResume &rArr; KernelUnblock &rArr; OS_Tick_Enable &rArr; rtos::internal::SysTimer::SysTimer() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::update_tick()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::cancel_tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtx_idle.o(.data)
</UL>
<P><STRONG><a name="[2c4]"></a>compute_tick</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, .\build\mbed_ticker_api.o(i.compute_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = compute_tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[2de]"></a>initialize</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, .\build\mbed_ticker_api.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>

<P><STRONG><a name="[2e1]"></a>schedule_interrupt</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, .\build\mbed_ticker_api.o(i.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ticker_match_interval_passed
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[3ba]"></a>set_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(i.set_handler))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>

<P><STRONG><a name="[2e0]"></a>update_present_time</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, .\build\mbed_ticker_api.o(i.update_present_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[ed]"></a>__sti___12_ppp_lwip_cpp_b3a13e7c</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\ppp_lwip.o(i.__sti___12_ppp_lwip_cpp_b3a13e7c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___12_ppp_lwip_cpp_b3a13e7c
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ppp_lwip.o(.init_array)
</UL>
<P><STRONG><a name="[1db]"></a>RTC_IntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtc_api.o(i.RTC_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_full
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[377]"></a>RTC_IntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtc_api.o(i.RTC_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_real
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_comp0
</UL>

<P><STRONG><a name="[1b5]"></a>EventFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\rtx_evflags.o(i.EventFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_736f7bde__atomic_chk32_any
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_736f7bde__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
</UL>

<P><STRONG><a name="[30b]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
</UL>

<P><STRONG><a name="[309]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
</UL>

<P><STRONG><a name="[30a]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_evflags.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
</UL>

<P><STRONG><a name="[1c3]"></a>KernelBlock</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.KernelBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = KernelBlock &rArr; OS_Tick_Disable &rArr; rtos::internal::SysTimer::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
</UL>

<P><STRONG><a name="[1c5]"></a>KernelUnblock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.KernelUnblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = KernelUnblock &rArr; OS_Tick_Enable &rArr; rtos::internal::SysTimer::SysTimer() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
</UL>

<P><STRONG><a name="[311]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[313]"></a>__get_CONTROL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.__get_CONTROL))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[30f]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[310]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[2b7]"></a>os_kernel_is_active</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\rtx_lib.o(i.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[1d1]"></a>MessageQueueGet</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_dec32_nz
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1d4]"></a>MessageQueuePut</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[33b]"></a>MessageQueueRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[31b]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[319]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[31a]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2e2]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, .\build\rtx_msgqueue.o(i.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2e8]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, .\build\rtx_msgqueue.o(i.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[323]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[321]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[322]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[1dc]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_eca73427__atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[1de]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_eca73427__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[364]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[362]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[363]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[2ec]"></a>isr_queue_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_system.o(i.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isr_queue_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[2ef]"></a>isr_queue_put</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\rtx_system.o(i.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[1e4]"></a>ThreadFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[36d]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[36b]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[36c]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[350]"></a>osRtxKernelGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[354]"></a>osRtxThreadFree</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[351]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[3b6]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[360]"></a>TimerInsert</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, .\build\rtx_timer.o(i.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[35f]"></a>TimerUnlink</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_timer.o(i.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[2f3]"></a>LEUART_IntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart1_irq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart0_irq
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
</UL>

<P><STRONG><a name="[398]"></a>LEUART_IntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
</UL>

<P><STRONG><a name="[39e]"></a>LEUART_IntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
</UL>

<P><STRONG><a name="[2f1]"></a>LEUART_IntGetEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_IntGetEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart1_irq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart0_irq
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[39c]"></a>LEUART_RxDataGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_RxDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
</UL>

<P><STRONG><a name="[38d]"></a>LEUART_StatusGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_StatusGet))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[39a]"></a>USART_IntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_irq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_tx_irq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_tx_irq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_tx_irq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_tx_irq
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
</UL>

<P><STRONG><a name="[399]"></a>USART_IntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
</UL>

<P><STRONG><a name="[39f]"></a>USART_IntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
</UL>

<P><STRONG><a name="[389]"></a>USART_IntGetEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_IntGetEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[39d]"></a>USART_RxDataGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_RxDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
</UL>

<P><STRONG><a name="[38f]"></a>USART_StatusGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_StatusGet))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[390]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\serial_api.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[393]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, .\build\serial_api.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[391]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\serial_api.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[392]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\serial_api.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[394]"></a>__NVIC_SetVector</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\serial_api.o(i.__NVIC_SetVector))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
</UL>

<P><STRONG><a name="[84]"></a>leuart0_irq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\serial_api.o(i.leuart0_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = leuart0_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntGetEnabled
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[85]"></a>leuart1_irq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\serial_api.o(i.leuart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = leuart1_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntGetEnabled
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[37c]"></a>serial_enable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_enable &rArr; LEUART_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Enable
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[37f]"></a>serial_enable_pins</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_enable_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = serial_enable_pins &rArr;  pin_mode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[386]"></a>serial_get_clock</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_get_clock))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
</UL>

<P><STRONG><a name="[37e]"></a>serial_get_index</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_get_index
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_pointer_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
</UL>

<P><STRONG><a name="[381]"></a>serial_get_rx_irq_index</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_get_rx_irq_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = serial_get_rx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[382]"></a>serial_get_tx_irq_index</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_get_tx_irq_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[37b]"></a>serial_leuart_baud</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, .\build\serial_api.o(i.serial_leuart_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[380]"></a>serial_pointer_get_index</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_pointer_get_index))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_index
</UL>

<P><STRONG><a name="[38a]"></a>serial_rx_abort_asynch_intern</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_rx_abort_asynch_intern))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = serial_rx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_free
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelEnable
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_unblock_sleep
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntDisable
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntDisable
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[388]"></a>serial_set_route</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_set_route))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[38b]"></a>serial_tx_abort_asynch_intern</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_tx_abort_asynch_intern))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = serial_tx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_free
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelEnable
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_unblock_sleep
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntDisable
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntDisable
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[39b]"></a>serial_unblock_sleep</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_unblock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
</UL>

<P><STRONG><a name="[7a]"></a>uart0_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart0_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart0_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[7b]"></a>uart0_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart0_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart0_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[7c]"></a>uart1_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart1_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[7d]"></a>uart1_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart1_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[387]"></a>uart_init</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, .\build\serial_api.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2f2]"></a>uart_irq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\serial_api.o(i.uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_pointer_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_irq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_irq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_tx_irq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_rx_irq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_tx_irq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_rx_irq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_tx_irq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_rx_irq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_tx_irq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_rx_irq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart1_irq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart0_irq
</UL>

<P><STRONG><a name="[7e]"></a>usart0_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart0_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart0_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[7f]"></a>usart0_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart0_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart0_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[80]"></a>usart1_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart1_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart1_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[81]"></a>usart1_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart1_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart1_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[82]"></a>usart2_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart2_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart2_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[83]"></a>usart2_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart2_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart2_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[52]"></a>&lang;Func4&rang;</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serialbase.o(i.<Func4>))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = &lang;Func4&rang; &rArr; mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[ee]"></a>__sti___7_SPI_cpp_ab1f1164</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___7_SPI_cpp_ab1f1164 &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[3c0]"></a>TIMER_CompareSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.TIMER_CompareSet))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>

<P><STRONG><a name="[3bb]"></a>TIMER_IntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.TIMER_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_clear_interrupt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler_internal
</UL>

<P><STRONG><a name="[3bc]"></a>TIMER_IntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.TIMER_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
</UL>

<P><STRONG><a name="[3bd]"></a>TIMER_IntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.TIMER_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[3be]"></a>TIMER_IntGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.TIMER_IntGet))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler_internal
</UL>

<P><STRONG><a name="[1f4]"></a>ITM_SendChar(unsigned)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\main.o(i._Z12ITM_SendCharj))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_string(char*)
</UL>

<P><STRONG><a name="[50]"></a>SYSTEM_GetUnique()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\main.o(i._Z16SYSTEM_GetUniquev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTEM_GetUnique()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i._Z16PWP_SW_BG96_testv)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ef]"></a>__sti___8_main_cpp_led0_n</STRONG> (Thumb, 626 bytes, Stack size 32 bytes, .\build\main.o(i.__sti___8_main_cpp_led0_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_led0_n &rArr; mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn(PinName)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::EasyCellularConnection::EasyCellularConnection(bool)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinDetect::PinDetect(PinName)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn(PinName, PinMode)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::LowPowerTicker::LowPowerTicker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[132]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc_mt.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[158]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; sleep_manager_lock_deep_sleep_internal &rArr; error &rArr; exit &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[166]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[49]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
